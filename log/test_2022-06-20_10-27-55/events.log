[0.000000] (-) TimerEvent: {}
[0.001949] (sf_pkg) JobQueued: {'identifier': 'sf_pkg', 'dependencies': OrderedDict([('sf_pkg', '/home/pi/sunflower/install/sf_pkg')])}
[0.002385] (stem_pkg) JobQueued: {'identifier': 'stem_pkg', 'dependencies': OrderedDict([('stem_pkg', '/home/pi/sunflower/install/stem_pkg')])}
[0.006922] (sunflower_interfaces) JobQueued: {'identifier': 'sunflower_interfaces', 'dependencies': OrderedDict([('sunflower_interfaces', '/home/pi/sunflower/install/sunflower_interfaces')])}
[0.007231] (test_pkg) JobQueued: {'identifier': 'test_pkg', 'dependencies': OrderedDict([('test_pkg', '/home/pi/sunflower/install/test_pkg')])}
[0.007402] (tflite_pkg) JobQueued: {'identifier': 'tflite_pkg', 'dependencies': OrderedDict([('tflite_pkg', '/home/pi/sunflower/install/tflite_pkg')])}
[0.007577] (sf_pkg) JobStarted: {'identifier': 'sf_pkg'}
[0.075907] (stem_pkg) JobStarted: {'identifier': 'stem_pkg'}
[0.099395] (-) TimerEvent: {}
[0.108670] (sunflower_interfaces) JobStarted: {'identifier': 'sunflower_interfaces'}
[0.167662] (test_pkg) JobStarted: {'identifier': 'test_pkg'}
[0.199605] (-) TimerEvent: {}
[0.302487] (-) TimerEvent: {}
[0.403685] (-) TimerEvent: {}
[0.504595] (-) TimerEvent: {}
[0.605482] (-) TimerEvent: {}
[0.706432] (-) TimerEvent: {}
[0.807355] (-) TimerEvent: {}
[0.908379] (-) TimerEvent: {}
[1.009320] (-) TimerEvent: {}
[1.110477] (-) TimerEvent: {}
[1.211341] (-) TimerEvent: {}
[1.312283] (-) TimerEvent: {}
[1.413210] (-) TimerEvent: {}
[1.514012] (-) TimerEvent: {}
[1.614935] (-) TimerEvent: {}
[1.665632] (sf_pkg) Command: {'cmd': ['/usr/bin/python3', '-m', 'pytest'], 'cwd': '/home/pi/sunflower/src/sf_pkg', 'env': {'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'pi', 'SSH_CLIENT': '211.217.28.227 58587 22', 'XDG_SESSION_TYPE': 'tty', 'GIT_ASKPASS': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/extensions/git/dist/askpass.sh', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/home/pi/sunflower/install/sunflower_interfaces/lib:/opt/ros/foxy/opt/yaml_cpp_vendor/lib:/opt/ros/foxy/opt/rviz_ogre_vendor/lib:/opt/ros/foxy/lib/aarch64-linux-gnu:/opt/ros/foxy/lib', 'BROWSER': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/bin/helpers/browser.sh', 'MOTD_SHOWN': 'pam', 'HOME': '/home/pi', 'TERM_PROGRAM_VERSION': '1.68.1', 'VSCODE_IPC_HOOK_CLI': '/run/user/1000/vscode-ipc-8bde6f76-ba4e-4b4d-b68b-5b379bd0b432.sock', 'ROS_PYTHON_VERSION': '3', 'VSCODE_GIT_ASKPASS_MAIN': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/extensions/git/dist/askpass-main.js', 'VSCODE_GIT_ASKPASS_NODE': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/node', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'COLCON_PREFIX_PATH': '/home/pi/sunflower/install', 'ROS_DISTRO': 'foxy', 'LOGNAME': 'pi', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'XDG_SESSION_CLASS': 'user', 'TERM': 'xterm-256color', 'XDG_SESSION_ID': '4', 'ROS_LOCALHOST_ONLY': '0', 'PATH': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/bin/remote-cli:/home/pi/.local/bin:/opt/ros/foxy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'XDG_RUNTIME_DIR': '/run/user/1000', 'LANG': 'C.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VSCODE_GIT_IPC_HANDLE': '/run/user/1000/vscode-git-ad91e88160.sock', 'TERM_PROGRAM': 'vscode', 'AMENT_PREFIX_PATH': '/home/pi/sunflower/install/sf_pkg:/home/pi/sunflower/install/tflite_pkg:/home/pi/sunflower/install/test_pkg:/home/pi/sunflower/install/sunflower_interfaces:/opt/ros/foxy', 'SHELL': '/bin/bash', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'PWD': '/home/pi/sunflower/build/sf_pkg', 'SSH_CONNECTION': '211.217.28.227 58587 210.91.28.223 22', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/pi/sunflower/build/sf_pkg:/home/pi/sunflower/install/sf_pkg/lib/python3.8/site-packages:/home/pi/sunflower/build/tflite_pkg:/home/pi/sunflower/install/tflite_pkg/lib/python3.8/site-packages:/home/pi/sunflower/build/test_pkg:/home/pi/sunflower/install/test_pkg/lib/python3.8/site-packages:/home/pi/sunflower/install/sunflower_interfaces/lib/python3.8/site-packages:/home/pi/sunflower/build/stem_pkg:/home/pi/sunflower/install/stem_pkg/lib/python3.8/site-packages:/opt/ros/foxy/lib/python3.8/site-packages', 'COLCON': '1', 'CMAKE_PREFIX_PATH': '/home/pi/sunflower/install/sunflower_interfaces', 'PYTEST_ADDOPTS': '--tb=short --junit-xml=/home/pi/sunflower/build/sf_pkg/pytest.xml --junit-prefix=sf_pkg -o cache_dir=/home/pi/sunflower/build/sf_pkg/.pytest_cache'}, 'shell': False}
[1.715305] (-) TimerEvent: {}
[1.818035] (-) TimerEvent: {}
[1.918916] (-) TimerEvent: {}
[2.019787] (-) TimerEvent: {}
[2.122134] (-) TimerEvent: {}
[2.223353] (-) TimerEvent: {}
[2.331820] (-) TimerEvent: {}
[2.438083] (-) TimerEvent: {}
[2.543932] (-) TimerEvent: {}
[2.646807] (-) TimerEvent: {}
[2.747876] (-) TimerEvent: {}
[2.848968] (-) TimerEvent: {}
[2.953862] (-) TimerEvent: {}
[3.058016] (-) TimerEvent: {}
[3.163280] (-) TimerEvent: {}
[3.264511] (-) TimerEvent: {}
[3.365853] (-) TimerEvent: {}
[3.471293] (-) TimerEvent: {}
[3.527850] (stem_pkg) Command: {'cmd': ['/usr/bin/python3', '-m', 'pytest'], 'cwd': '/home/pi/sunflower/src/stem_pkg', 'env': {'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'pi', 'SSH_CLIENT': '211.217.28.227 58587 22', 'XDG_SESSION_TYPE': 'tty', 'GIT_ASKPASS': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/extensions/git/dist/askpass.sh', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/home/pi/sunflower/install/sunflower_interfaces/lib:/opt/ros/foxy/opt/yaml_cpp_vendor/lib:/opt/ros/foxy/opt/rviz_ogre_vendor/lib:/opt/ros/foxy/lib/aarch64-linux-gnu:/opt/ros/foxy/lib', 'BROWSER': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/bin/helpers/browser.sh', 'MOTD_SHOWN': 'pam', 'HOME': '/home/pi', 'TERM_PROGRAM_VERSION': '1.68.1', 'VSCODE_IPC_HOOK_CLI': '/run/user/1000/vscode-ipc-8bde6f76-ba4e-4b4d-b68b-5b379bd0b432.sock', 'ROS_PYTHON_VERSION': '3', 'VSCODE_GIT_ASKPASS_MAIN': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/extensions/git/dist/askpass-main.js', 'VSCODE_GIT_ASKPASS_NODE': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/node', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'COLCON_PREFIX_PATH': '/home/pi/sunflower/install', 'ROS_DISTRO': 'foxy', 'LOGNAME': 'pi', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'XDG_SESSION_CLASS': 'user', 'TERM': 'xterm-256color', 'XDG_SESSION_ID': '4', 'ROS_LOCALHOST_ONLY': '0', 'PATH': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/bin/remote-cli:/home/pi/.local/bin:/opt/ros/foxy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'XDG_RUNTIME_DIR': '/run/user/1000', 'LANG': 'C.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VSCODE_GIT_IPC_HANDLE': '/run/user/1000/vscode-git-ad91e88160.sock', 'TERM_PROGRAM': 'vscode', 'AMENT_PREFIX_PATH': '/home/pi/sunflower/install/tflite_pkg:/home/pi/sunflower/install/test_pkg:/home/pi/sunflower/install/sunflower_interfaces:/home/pi/sunflower/install/sf_pkg:/opt/ros/foxy', 'SHELL': '/bin/bash', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'PWD': '/home/pi/sunflower/build/stem_pkg', 'SSH_CONNECTION': '211.217.28.227 58587 210.91.28.223 22', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/pi/sunflower/build/stem_pkg:/home/pi/sunflower/install/stem_pkg/lib/python3.8/site-packages:/home/pi/sunflower/build/tflite_pkg:/home/pi/sunflower/install/tflite_pkg/lib/python3.8/site-packages:/home/pi/sunflower/build/test_pkg:/home/pi/sunflower/install/test_pkg/lib/python3.8/site-packages:/home/pi/sunflower/install/sunflower_interfaces/lib/python3.8/site-packages:/home/pi/sunflower/build/sf_pkg:/home/pi/sunflower/install/sf_pkg/lib/python3.8/site-packages:/opt/ros/foxy/lib/python3.8/site-packages', 'COLCON': '1', 'CMAKE_PREFIX_PATH': '/home/pi/sunflower/install/sunflower_interfaces', 'PYTEST_ADDOPTS': '--tb=short --junit-xml=/home/pi/sunflower/build/stem_pkg/pytest.xml --junit-prefix=stem_pkg -o cache_dir=/home/pi/sunflower/build/stem_pkg/.pytest_cache'}, 'shell': False}
[3.572110] (-) TimerEvent: {}
[3.675019] (-) TimerEvent: {}
[3.777645] (-) TimerEvent: {}
[3.878904] (-) TimerEvent: {}
[3.980309] (-) TimerEvent: {}
[4.081355] (-) TimerEvent: {}
[4.182338] (-) TimerEvent: {}
[4.283238] (-) TimerEvent: {}
[4.384590] (-) TimerEvent: {}
[4.485607] (-) TimerEvent: {}
[4.586666] (-) TimerEvent: {}
[4.687632] (-) TimerEvent: {}
[4.789196] (-) TimerEvent: {}
[4.890302] (-) TimerEvent: {}
[4.991335] (-) TimerEvent: {}
[5.092485] (-) TimerEvent: {}
[5.196232] (-) TimerEvent: {}
[5.297180] (-) TimerEvent: {}
[5.398266] (-) TimerEvent: {}
[5.499290] (-) TimerEvent: {}
[5.601049] (-) TimerEvent: {}
[5.701999] (-) TimerEvent: {}
[5.802991] (-) TimerEvent: {}
[5.811424] (sf_pkg) StdoutLine: {'line': b'\x1b[1m============================= test session starts ==============================\x1b[0m\n'}
[5.813031] (sf_pkg) StdoutLine: {'line': b'platform linux -- Python 3.8.10, pytest-7.1.2, pluggy-0.13.0\n'}
[5.849334] (sf_pkg) StdoutLine: {'line': b'cachedir: /home/pi/sunflower/build/sf_pkg/.pytest_cache\n'}
[5.850257] (sf_pkg) StdoutLine: {'line': b'rootdir: /home/pi/sunflower/src/sf_pkg\n'}
[5.850881] (sf_pkg) StdoutLine: {'line': b'plugins: ament-flake8-0.9.6, ament-copyright-0.9.6, launch-testing-ros-0.11.6, ament-xmllint-0.9.6, ament-pep257-0.9.6, ament-lint-0.9.6, launch-testing-0.10.8, rerunfailures-10.2, repeat-0.9.1, colcon-core-0.8.3, cov-2.8.1\n'}
[5.903452] (-) TimerEvent: {}
[6.006715] (-) TimerEvent: {}
[6.081494] (test_pkg) Command: {'cmd': ['/usr/bin/python3', '-m', 'pytest'], 'cwd': '/home/pi/sunflower/src/test_pkg', 'env': {'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'pi', 'SSH_CLIENT': '211.217.28.227 58587 22', 'XDG_SESSION_TYPE': 'tty', 'GIT_ASKPASS': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/extensions/git/dist/askpass.sh', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/home/pi/sunflower/install/sunflower_interfaces/lib:/opt/ros/foxy/opt/yaml_cpp_vendor/lib:/opt/ros/foxy/opt/rviz_ogre_vendor/lib:/opt/ros/foxy/lib/aarch64-linux-gnu:/opt/ros/foxy/lib', 'BROWSER': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/bin/helpers/browser.sh', 'MOTD_SHOWN': 'pam', 'HOME': '/home/pi', 'TERM_PROGRAM_VERSION': '1.68.1', 'VSCODE_IPC_HOOK_CLI': '/run/user/1000/vscode-ipc-8bde6f76-ba4e-4b4d-b68b-5b379bd0b432.sock', 'ROS_PYTHON_VERSION': '3', 'VSCODE_GIT_ASKPASS_MAIN': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/extensions/git/dist/askpass-main.js', 'VSCODE_GIT_ASKPASS_NODE': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/node', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'COLCON_PREFIX_PATH': '/home/pi/sunflower/install', 'ROS_DISTRO': 'foxy', 'LOGNAME': 'pi', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'XDG_SESSION_CLASS': 'user', 'TERM': 'xterm-256color', 'XDG_SESSION_ID': '4', 'ROS_LOCALHOST_ONLY': '0', 'PATH': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/bin/remote-cli:/home/pi/.local/bin:/opt/ros/foxy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'XDG_RUNTIME_DIR': '/run/user/1000', 'LANG': 'C.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VSCODE_GIT_IPC_HANDLE': '/run/user/1000/vscode-git-ad91e88160.sock', 'TERM_PROGRAM': 'vscode', 'AMENT_PREFIX_PATH': '/home/pi/sunflower/install/test_pkg:/home/pi/sunflower/install/tflite_pkg:/home/pi/sunflower/install/sunflower_interfaces:/home/pi/sunflower/install/sf_pkg:/opt/ros/foxy', 'SHELL': '/bin/bash', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'PWD': '/home/pi/sunflower/build/test_pkg', 'SSH_CONNECTION': '211.217.28.227 58587 210.91.28.223 22', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/pi/sunflower/build/test_pkg:/home/pi/sunflower/install/test_pkg/lib/python3.8/site-packages:/home/pi/sunflower/build/tflite_pkg:/home/pi/sunflower/install/tflite_pkg/lib/python3.8/site-packages:/home/pi/sunflower/install/sunflower_interfaces/lib/python3.8/site-packages:/home/pi/sunflower/build/stem_pkg:/home/pi/sunflower/install/stem_pkg/lib/python3.8/site-packages:/home/pi/sunflower/build/sf_pkg:/home/pi/sunflower/install/sf_pkg/lib/python3.8/site-packages:/opt/ros/foxy/lib/python3.8/site-packages', 'COLCON': '1', 'CMAKE_PREFIX_PATH': '/home/pi/sunflower/install/sunflower_interfaces', 'PYTEST_ADDOPTS': '--tb=short --junit-xml=/home/pi/sunflower/build/test_pkg/pytest.xml --junit-prefix=test_pkg -o cache_dir=/home/pi/sunflower/build/test_pkg/.pytest_cache'}, 'shell': False}
[6.107983] (-) TimerEvent: {}
[6.118899] (sunflower_interfaces) JobEnded: {'identifier': 'sunflower_interfaces', 'rc': 0}
[6.137893] (tflite_pkg) JobStarted: {'identifier': 'tflite_pkg'}
[6.208235] (-) TimerEvent: {}
[6.229278] (sf_pkg) StdoutLine: {'line': b'\x1b[1mcollecting ... \x1b[0m\x1b[1m\n'}
[6.230367] (sf_pkg) StdoutLine: {'line': b'collected 3 items                                                              \x1b[0m\n'}
[6.231676] (sf_pkg) StdoutLine: {'line': b'\n'}
[6.308390] (-) TimerEvent: {}
[6.411058] (-) TimerEvent: {}
[6.513922] (-) TimerEvent: {}
[6.579761] (sf_pkg) StdoutLine: {'line': b'test/test_copyright.py \x1b[31mF\x1b[0m\x1b[31m                                                 [ 33%]\x1b[0m\n'}
[6.614274] (-) TimerEvent: {}
[6.718503] (-) TimerEvent: {}
[6.821649] (-) TimerEvent: {}
[6.924556] (-) TimerEvent: {}
[7.027782] (-) TimerEvent: {}
[7.131972] (-) TimerEvent: {}
[7.236106] (-) TimerEvent: {}
[7.342122] (-) TimerEvent: {}
[7.445789] (-) TimerEvent: {}
[7.550497] (-) TimerEvent: {}
[7.655484] (-) TimerEvent: {}
[7.758605] (-) TimerEvent: {}
[7.863085] (-) TimerEvent: {}
[7.967303] (-) TimerEvent: {}
[8.071740] (-) TimerEvent: {}
[8.176219] (-) TimerEvent: {}
[8.280151] (-) TimerEvent: {}
[8.384055] (-) TimerEvent: {}
[8.488549] (-) TimerEvent: {}
[8.589740] (-) TimerEvent: {}
[8.686167] (stem_pkg) StdoutLine: {'line': b'\x1b[1m============================= test session starts ==============================\x1b[0m\n'}
[8.687178] (stem_pkg) StdoutLine: {'line': b'platform linux -- Python 3.8.10, pytest-7.1.2, pluggy-0.13.0\n'}
[8.689979] (-) TimerEvent: {}
[8.725892] (stem_pkg) StdoutLine: {'line': b'cachedir: /home/pi/sunflower/build/stem_pkg/.pytest_cache\n'}
[8.726911] (stem_pkg) StdoutLine: {'line': b'rootdir: /home/pi/sunflower/src/stem_pkg\n'}
[8.727601] (stem_pkg) StdoutLine: {'line': b'plugins: ament-flake8-0.9.6, ament-copyright-0.9.6, launch-testing-ros-0.11.6, ament-xmllint-0.9.6, ament-pep257-0.9.6, ament-lint-0.9.6, launch-testing-0.10.8, rerunfailures-10.2, repeat-0.9.1, colcon-core-0.8.3, cov-2.8.1\n'}
[8.790215] (-) TimerEvent: {}
[8.802762] (sf_pkg) StdoutLine: {'line': b'test/test_flake8.py \x1b[31mF\x1b[0m\x1b[31m                                                    [ 66%]\x1b[0m\n'}
[8.890427] (-) TimerEvent: {}
[8.991809] (-) TimerEvent: {}
[9.093742] (-) TimerEvent: {}
[9.195341] (-) TimerEvent: {}
[9.269658] (stem_pkg) StdoutLine: {'line': b'\x1b[1mcollecting ... \x1b[0m\x1b[1m\n'}
[9.295584] (-) TimerEvent: {}
[9.307311] (tflite_pkg) Command: {'cmd': ['/usr/bin/python3', '-m', 'pytest'], 'cwd': '/home/pi/sunflower/src/tflite_pkg', 'env': {'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'pi', 'SSH_CLIENT': '211.217.28.227 58587 22', 'XDG_SESSION_TYPE': 'tty', 'GIT_ASKPASS': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/extensions/git/dist/askpass.sh', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/home/pi/sunflower/install/sunflower_interfaces/lib:/opt/ros/foxy/opt/yaml_cpp_vendor/lib:/opt/ros/foxy/opt/rviz_ogre_vendor/lib:/opt/ros/foxy/lib/aarch64-linux-gnu:/opt/ros/foxy/lib', 'BROWSER': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/bin/helpers/browser.sh', 'MOTD_SHOWN': 'pam', 'HOME': '/home/pi', 'TERM_PROGRAM_VERSION': '1.68.1', 'VSCODE_IPC_HOOK_CLI': '/run/user/1000/vscode-ipc-8bde6f76-ba4e-4b4d-b68b-5b379bd0b432.sock', 'ROS_PYTHON_VERSION': '3', 'VSCODE_GIT_ASKPASS_MAIN': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/extensions/git/dist/askpass-main.js', 'VSCODE_GIT_ASKPASS_NODE': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/node', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'COLCON_PREFIX_PATH': '/home/pi/sunflower/install', 'ROS_DISTRO': 'foxy', 'LOGNAME': 'pi', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'XDG_SESSION_CLASS': 'user', 'TERM': 'xterm-256color', 'XDG_SESSION_ID': '4', 'ROS_LOCALHOST_ONLY': '0', 'PATH': '/home/pi/.vscode-server/bin/30d9c6cd9483b2cc586687151bcbcd635f373630/bin/remote-cli:/home/pi/.local/bin:/opt/ros/foxy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'XDG_RUNTIME_DIR': '/run/user/1000', 'LANG': 'C.UTF-8', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'VSCODE_GIT_IPC_HANDLE': '/run/user/1000/vscode-git-ad91e88160.sock', 'TERM_PROGRAM': 'vscode', 'AMENT_PREFIX_PATH': '/home/pi/sunflower/install/tflite_pkg:/home/pi/sunflower/install/test_pkg:/home/pi/sunflower/install/sunflower_interfaces:/home/pi/sunflower/install/sf_pkg:/opt/ros/foxy', 'SHELL': '/bin/bash', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'PWD': '/home/pi/sunflower/build/tflite_pkg', 'SSH_CONNECTION': '211.217.28.227 58587 210.91.28.223 22', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/pi/sunflower/build/tflite_pkg:/home/pi/sunflower/install/tflite_pkg/lib/python3.8/site-packages:/home/pi/sunflower/build/test_pkg:/home/pi/sunflower/install/test_pkg/lib/python3.8/site-packages:/home/pi/sunflower/install/sunflower_interfaces/lib/python3.8/site-packages:/home/pi/sunflower/build/stem_pkg:/home/pi/sunflower/install/stem_pkg/lib/python3.8/site-packages:/home/pi/sunflower/build/sf_pkg:/home/pi/sunflower/install/sf_pkg/lib/python3.8/site-packages:/opt/ros/foxy/lib/python3.8/site-packages', 'COLCON': '1', 'CMAKE_PREFIX_PATH': '/home/pi/sunflower/install/sunflower_interfaces', 'PYTEST_ADDOPTS': '--tb=short --junit-xml=/home/pi/sunflower/build/tflite_pkg/pytest.xml --junit-prefix=tflite_pkg -o cache_dir=/home/pi/sunflower/build/tflite_pkg/.pytest_cache'}, 'shell': False}
[9.327396] (sf_pkg) StdoutLine: {'line': b'test/test_pep257.py \x1b[32m.\x1b[0m\x1b[31m                                                    [100%]\x1b[0m\n'}
[9.329846] (sf_pkg) StdoutLine: {'line': b'\n'}
[9.331210] (sf_pkg) StdoutLine: {'line': b'=================================== FAILURES ===================================\n'}
[9.332721] (sf_pkg) StdoutLine: {'line': b'\x1b[31m\x1b[1m________________________________ test_copyright ________________________________\x1b[0m\n'}
[9.334189] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mtest/test_copyright.py\x1b[0m:23: in test_copyright\n'}
[9.338279] (stem_pkg) StdoutLine: {'line': b'collecting 0 items                                                             \x1b[0m\x1b[1m\n'}
[9.340454] (stem_pkg) StdoutLine: {'line': b'collected 3 items                                                              \x1b[0m\n'}
[9.341876] (stem_pkg) StdoutLine: {'line': b'\n'}
[9.397015] (-) TimerEvent: {}
[9.501716] (-) TimerEvent: {}
[9.555456] (sf_pkg) StdoutLine: {'line': b"    \x1b[34;01massert\x1b[39;49;00m rc == \x1b[34;01m0\x1b[39;49;00m, \x1b[33m'\x1b[39;49;00m\x1b[33mFound errors\x1b[39;49;00m\x1b[33m'\x1b[39;49;00m\n"}
[9.558342] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   AssertionError: Found errors\x1b[0m\n'}
[9.559542] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   assert 1 == 0\x1b[0m\n'}
[9.562257] (sf_pkg) StdoutLine: {'line': b'----------------------------- Captured stderr call -----------------------------\n'}
[9.565441] (sf_pkg) StdoutLine: {'line': b'launch/sf.launch.py: could not find copyright notice\n'}
[9.566117] (sf_pkg) StdoutLine: {'line': b'sf_pkg/I2C_LCD_driver.py: could not find copyright notice\n'}
[9.566655] (sf_pkg) StdoutLine: {'line': b'sf_pkg/calculator.py: could not find copyright notice\n'}
[9.570801] (sf_pkg) StdoutLine: {'line': b'sf_pkg/cmd_selector.py: could not find copyright notice\n'}
[9.575038] (sf_pkg) StdoutLine: {'line': b'sf_pkg/serial_talker.py: could not find copyright notice\n'}
[9.591654] (sf_pkg) StdoutLine: {'line': b'sf_pkg/tensor.py: could not find copyright notice\n'}
[9.598467] (sf_pkg) StdoutLine: {'line': b'sf_pkg/tensor_publisher.py: could not find copyright notice\n'}
[9.603768] (-) TimerEvent: {}
[9.607742] (sf_pkg) StdoutLine: {'line': b'7 errors, checked 11 files\n'}
[9.617164] (sf_pkg) StdoutLine: {'line': b'\x1b[31m\x1b[1m_________________________________ test_flake8 __________________________________\x1b[0m\n'}
[9.621976] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mtest/test_flake8.py\x1b[0m:23: in test_flake8\n'}
[9.626166] (sf_pkg) StdoutLine: {'line': b'    \x1b[34;01massert\x1b[39;49;00m rc == \x1b[34;01m0\x1b[39;49;00m, \\\n'}
[9.630818] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   AssertionError: Found 212 code style errors / warnings:\x1b[0m\n'}
[9.632819] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./setup.py:2:1: I100 Import statements are in the wrong order. 'import os' should be before 'from setuptools import setup' and in a different group.\x1b[0m\n"}
[9.634819] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./setup.py:2:1: I201 Missing newline between import groups. 'import os' is identified as Stdlib and 'from setuptools import setup' is identified as Third Party.\x1b[0m\n"}
[9.637100] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./setup.py:3:1: I100 Import statements are in the wrong order. 'from glob import glob' should be before 'import os'\x1b[0m\n"}
[9.639099] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./setup.py:26:13: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[9.648494] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./setup.py:27:13: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[9.652109] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./setup.py:28:13: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[9.654305] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./setup.py:29:13: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[9.657215] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/sf.launch.py:4:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[9.660608] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/sf.launch.py:10:13: E265 block comment should start with '# '\x1b[0m\n"}
[9.663597] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/sf.launch.py:21:32: E202 whitespace before ')'\x1b[0m\n"}
[9.667564] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/sf.launch.py:27:20: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[9.669661] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/sf.launch.py:27:29: E202 whitespace before ')'\x1b[0m\n"}
[9.671692] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/sf.launch.py:28:7: W292 no newline at end of file\x1b[0m\n'}
[9.673547] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/serial_talker.py:5:1: I100 Import statements are in the wrong order. 'import serial' should be before 'from std_msgs.msg import String'\x1b[0m\n"}
[9.676368] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/serial_talker.py:5:14: W291 trailing whitespace\x1b[0m\n'}
[9.678219] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/serial_talker.py:11:5: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.679823] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/serial_talker.py:19:32: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[9.681327] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/serial_talker.py:22:9: E265 block comment should start with '# '\x1b[0m\n"}
[9.682881] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/serial_talker.py:23:9: E265 block comment should start with '# '\x1b[0m\n"}
[9.685502] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/serial_talker.py:40:1: E305 expected 2 blank lines after class or function definition, found 1\x1b[0m\n'}
[9.689452] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/serial_talker.py:40:26: E203 whitespace before ':'\x1b[0m\n"}
[9.692351] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/serial_talker.py:41:11: W292 no newline at end of file\x1b[0m\n'}
[9.693710] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:5:1: E402 module level import not at top of file\x1b[0m\n'}
[9.694999] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:6:1: E402 module level import not at top of file\x1b[0m\n'}
[9.696109] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:6:1: I100 Import statements are in the wrong order. 'from time import sleep' should be before 'import smbus' and in a different group.\x1b[0m\n"}
[9.697077] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:6:1: I201 Missing newline between import groups. 'from time import sleep' is identified as Stdlib and 'import smbus' is identified as Third Party.\x1b[0m\n"}
[9.698052] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:7:1: E302 expected 2 blank lines, found 0\x1b[0m\n'}
[9.699164] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:8:1: CNL100 Class definition does not have a new line.\x1b[0m\n'}
[9.700596] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:8:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.702232] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:9:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.703992] (-) TimerEvent: {}
[9.705595] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:10:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.712437] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:12:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.714116] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:12:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.715999] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:13:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.717381] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:14:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.719080] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:16:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.720539] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:16:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.721974] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:17:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.723597] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:18:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.727171] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:20:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.730481] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:20:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.733800] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:21:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.736493] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:22:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.738208] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:24:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.748614] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:24:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.755184] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:25:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.758178] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:27:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.760585] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:27:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.761948] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:28:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.763314] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:30:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.768538] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:30:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.770062] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:31:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.771625] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:33:1: E305 expected 2 blank lines after class or function definition, found 0\x1b[0m\n'}
[9.774820] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:68:16: E261 at least two spaces before inline comment\x1b[0m\n'}
[9.778188] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:69:16: E261 at least two spaces before inline comment\x1b[0m\n'}
[9.782099] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:70:16: E261 at least two spaces before inline comment\x1b[0m\n'}
[9.784344] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:71:1: E302 expected 2 blank lines, found 0\x1b[0m\n'}
[9.785677] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:72:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[9.787246] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:72:4: E265 block comment should start with '# '\x1b[0m\n"}
[9.789016] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:73:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.790480] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:74:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.792290] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:75:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.793980] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:76:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.796518] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:77:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.800267] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:78:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.803566] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:79:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.807447] (-) TimerEvent: {}
[9.809148] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:80:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.814477] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:81:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.818718] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:82:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.823484] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:83:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.825409] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:84:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[9.827430] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:85:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.829022] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:85:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.830497] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:86:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.832166] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:87:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.833530] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:88:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.834911] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:89:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.837810] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:90:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.843232] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:90:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.846619] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:91:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.848885] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:92:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.850525] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:93:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[9.852682] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:94:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.854280] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:94:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.855873] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:95:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.857472] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:96:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.859019] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:97:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[9.861651] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:98:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[9.866370] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:99:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.869865] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:99:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.872534] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:100:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.874485] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:101:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.876147] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:102:1: W293 blank line contains whitespace\x1b[0m\n'}
[9.877687] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:103:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[9.879175] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:104:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.881370] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:106:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.882974] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:108:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.885925] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:110:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.889121] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:112:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.892488] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:115:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.895539] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:116:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[9.897349] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:117:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.899004] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:117:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.900677] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:118:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.902580] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:119:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.904226] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:120:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[9.905839] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:121:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.907367] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:121:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.910498] (-) TimerEvent: {}
[9.912251] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:121:31: E261 at least two spaces before inline comment\x1b[0m\n'}
[9.920532] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:122:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.922056] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:123:10: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.923828] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:124:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.925451] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:125:10: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.927269] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:126:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[9.928981] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:127:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.930729] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:127:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.932755] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:128:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.934586] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:128:27: E703 statement ends with a semicolon\x1b[0m\n'}
[9.937210] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:129:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.940926] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:130:10: E111 indentation is not a multiple of four\x1b[0m\n'}
[9.944489] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/I2C_LCD_driver.py:131:41: W292 no newline at end of file\x1b[0m\n'}
[9.953983] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/cmd_selector.py:6:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[9.958889] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/cmd_selector.py:8:5: E301 expected 1 blank line, found 0\x1b[0m\n'}
[9.961652] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/cmd_selector.py:43:1: E303 too many blank lines (3)\x1b[0m\n'}
[9.964696] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/cmd_selector.py:54:1: E305 expected 2 blank lines after class or function definition, found 1\x1b[0m\n'}
[9.966265] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/cmd_selector.py:54:26: E203 whitespace before ':'\x1b[0m\n"}
[9.968094] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/cmd_selector.py:55:11: W292 no newline at end of file\x1b[0m\n'}
[9.971545] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:5:1: I100 Import statements are in the wrong order. 'import math' should be before 'from std_msgs.msg import String' and in a different group.\x1b[0m\n"}
[9.974762] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:5:1: I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from std_msgs.msg import String' is identified as Third Party.\x1b[0m\n"}
[9.978044] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:7:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[9.980411] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:7:23: E203 whitespace before ':'\x1b[0m\n"}
[9.981951] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:8:1: CNL100 Class definition does not have a new line.\x1b[0m\n'}
[9.983391] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:21:35: E203 whitespace before ':'\x1b[0m\n"}
[9.984872] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:33:30: E201 whitespace after '('\x1b[0m\n"}
[9.986091] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:33:31: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[9.987302] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:36:61: C417 Unnecessary use of map - use a generator expression instead.\x1b[0m\n'}
[9.989311] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:62:1: W293 blank line contains whitespace\x1b[0m\n'}
[9.991536] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:65:10: E203 whitespace before ','\x1b[0m\n"}
[9.993078] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:65:39: C417 Unnecessary use of map - use a generator expression instead.\x1b[0m\n'}
[9.994796] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:74:31: E272 multiple spaces before keyword\x1b[0m\n'}
[9.996121] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:82:1: W293 blank line contains whitespace\x1b[0m\n'}
[9.997810] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:83:28: E203 whitespace before ':'\x1b[0m\n"}
[9.999198] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:84:40: C417 Unnecessary use of map - use a generator expression instead.\x1b[0m\n'}
[10.000735] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:84:52: E203 whitespace before ':'\x1b[0m\n"}
[10.002296] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:86:9: E115 expected an indented block (comment)\x1b[0m\n'}
[10.004291] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:88:13: E203 whitespace before ':'\x1b[0m\n"}
[10.007408] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:92:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[10.010542] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:92:20: E203 whitespace before ':'\x1b[0m\n"}
[10.013871] (-) TimerEvent: {}
[10.015450] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:103:1: E305 expected 2 blank lines after class or function definition, found 1\x1b[0m\n'}
[10.022130] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:103:26: E203 whitespace before ':'\x1b[0m\n"}
[10.026142] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/calculator.py:104:11: W292 no newline at end of file\x1b[0m\n'}
[10.029858] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:5:1: I100 Import statements are in the wrong order. 'import cv2' should be before 'from sunflower_interfaces.msg import TfliteResult'\x1b[0m\n"}
[10.032474] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:7:1: I100 Import statements are in the wrong order. 'import numpy' should be before 'import tensorflow'\x1b[0m\n"}
[10.034178] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:9:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[10.036016] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:9:19: E203 whitespace before ':'\x1b[0m\n"}
[10.037736] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:10:1: CNL100 Class definition does not have a new line.\x1b[0m\n'}
[10.039773] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:20:46: E203 whitespace before ':'\x1b[0m\n"}
[10.041469] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:41:9: F841 local variable 'data' is assigned to but never used\x1b[0m\n"}
[10.043109] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:41:16: C408 Unnecessary list call - rewrite as a literal.\x1b[0m\n'}
[10.044631] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:53:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[10.045985] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:53:20: E203 whitespace before ':'\x1b[0m\n"}
[10.047459] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:55:50: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[10.049403] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:55:100: E501 line too long (100 > 99 characters)\x1b[0m\n'}
[10.051078] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:67:1: E305 expected 2 blank lines after class or function definition, found 1\x1b[0m\n'}
[10.053318] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:67:26: E203 whitespace before ':'\x1b[0m\n"}
[10.055652] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:70:1: E265 block comment should start with '# '\x1b[0m\n"}
[10.057864] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:70:29: W292 no newline at end of file\x1b[0m\n'}
[10.060430] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:70:29: W292 no newline at end of file\x1b[0m\n'}
[10.062892] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor.py:70:29: W292 no newline at end of file\x1b[0m\n'}
[10.065225] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:5:1: I100 Import statements are in the wrong order. 'import cv2' should be before 'from std_msgs.msg import String'\x1b[0m\n"}
[10.066711] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:7:1: I100 Import statements are in the wrong order. 'import numpy' should be before 'import tensorflow'\x1b[0m\n"}
[10.068626] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:8:1: I100 Import statements are in the wrong order. 'import time' should be before 'import numpy' and in a different group.\x1b[0m\n"}
[10.070712] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:8:1: I201 Missing newline between import groups. 'import time' is identified as Stdlib and 'import numpy' is identified as Third Party.\x1b[0m\n"}
[10.072478] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:9:1: I201 Missing newline between import groups. 'import I2C_LCD_driver' is identified as Third Party and 'import time' is identified as Stdlib.\x1b[0m\n"}
[10.074453] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:13:28: E203 whitespace before ':'\x1b[0m\n"}
[10.076113] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:14:1: CNL100 Class definition does not have a new line.\x1b[0m\n'}
[10.078210] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:18:34: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[10.080491] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:18:36: E231 missing whitespace after ','\x1b[0m\n"}
[10.083000] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:25:16: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[10.085594] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:25:19: E225 missing whitespace around operator\x1b[0m\n'}
[10.088268] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:25:80: E225 missing whitespace around operator\x1b[0m\n'}
[10.090070] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:25:80: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[10.091488] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:27:34: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[10.093155] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:27:36: E231 missing whitespace after ','\x1b[0m\n"}
[10.095203] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:28:34: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[10.097168] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:28:43: E231 missing whitespace after ','\x1b[0m\n"}
[10.098900] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:33:50: E203 whitespace before ':'\x1b[0m\n"}
[10.101090] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:37:16: F821 undefined name 'now'\x1b[0m\n"}
[10.104932] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:37:44: E203 whitespace before ':'\x1b[0m\n"}
[10.108398] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:40:38: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[10.111222] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:40:40: E231 missing whitespace after ','\x1b[0m\n"}
[10.113180] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:41:61: E231 missing whitespace after ','\x1b[0m\n"}
[10.114805] (-) TimerEvent: {}
[10.115652] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:58:20: C408 Unnecessary list call - rewrite as a literal.\x1b[0m\n'}
[10.120015] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:60:32: E203 whitespace before ':'\x1b[0m\n"}
[10.123954] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:62:44: C417 Unnecessary use of map - use a generator expression instead.\x1b[0m\n'}
[10.126248] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:62:56: E203 whitespace before ':'\x1b[0m\n"}
[10.128527] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:64:13: E115 expected an indented block (comment)\x1b[0m\n'}
[10.132933] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:68:13: E203 whitespace before ':'\x1b[0m\n"}
[10.136175] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:71:46: E203 whitespace before ':'\x1b[0m\n"}
[10.137902] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:92:16: C408 Unnecessary list call - rewrite as a literal.\x1b[0m\n'}
[10.139507] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:94:28: E203 whitespace before ':'\x1b[0m\n"}
[10.141749] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:97:20: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[10.144807] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:101:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[10.146938] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:101:20: E203 whitespace before ':'\x1b[0m\n"}
[10.149245] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:103:50: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[10.152331] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:103:100: E501 line too long (100 > 99 characters)\x1b[0m\n'}
[10.165490] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:117:1: E305 expected 2 blank lines after class or function definition, found 1\x1b[0m\n'}
[10.169465] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:117:26: E203 whitespace before ':'\x1b[0m\n"}
[10.171192] (sf_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:120:1: E265 block comment should start with '# '\x1b[0m\n"}
[10.174301] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:120:29: W292 no newline at end of file\x1b[0m\n'}
[10.178224] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:120:29: W292 no newline at end of file\x1b[0m\n'}
[10.185045] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./sf_pkg/tensor_publisher.py:120:29: W292 no newline at end of file\x1b[0m\n'}
[10.186707] (sf_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   assert 1 == 0\x1b[0m\n'}
[10.188369] (sf_pkg) StdoutLine: {'line': b'----------------------------- Captured stdout call -----------------------------\n'}
[10.189762] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.191377] (sf_pkg) StdoutLine: {'line': b"./setup.py:2:1: I100 Import statements are in the wrong order. 'import os' should be before 'from setuptools import setup' and in a different group.\n"}
[10.193151] (sf_pkg) StdoutLine: {'line': b'import os\n'}
[10.194974] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.197922] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.201638] (sf_pkg) StdoutLine: {'line': b"./setup.py:2:1: I201 Missing newline between import groups. 'import os' is identified as Stdlib and 'from setuptools import setup' is identified as Third Party.\n"}
[10.205864] (sf_pkg) StdoutLine: {'line': b'import os\n'}
[10.208535] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.210193] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.211843] (sf_pkg) StdoutLine: {'line': b"./setup.py:3:1: I100 Import statements are in the wrong order. 'from glob import glob' should be before 'import os'\n"}
[10.213283] (sf_pkg) StdoutLine: {'line': b'from glob import glob\n'}
[10.214567] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.216038] (-) TimerEvent: {}
[10.216880] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.222541] (sf_pkg) StdoutLine: {'line': b'./setup.py:26:13: Q000 Double quotes found but single quotes preferred\n'}
[10.226649] (sf_pkg) StdoutLine: {'line': b'            "serial_talker=sf_pkg.serial_talker:main",\n'}
[10.231441] (sf_pkg) StdoutLine: {'line': b'            ^\n'}
[10.234339] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.236650] (sf_pkg) StdoutLine: {'line': b'./setup.py:27:13: Q000 Double quotes found but single quotes preferred\n'}
[10.239511] (sf_pkg) StdoutLine: {'line': b'            "cmd_selector=sf_pkg.cmd_selector:main",\n'}
[10.242226] (sf_pkg) StdoutLine: {'line': b'            ^\n'}
[10.245095] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.248522] (sf_pkg) StdoutLine: {'line': b'./setup.py:28:13: Q000 Double quotes found but single quotes preferred\n'}
[10.250507] (sf_pkg) StdoutLine: {'line': b'            "calculator=sf_pkg.calculator:main",\n'}
[10.252366] (sf_pkg) StdoutLine: {'line': b'            ^\n'}
[10.253858] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.255171] (sf_pkg) StdoutLine: {'line': b'./setup.py:29:13: Q000 Double quotes found but single quotes preferred\n'}
[10.256644] (sf_pkg) StdoutLine: {'line': b'            "tensor_publisher=sf_pkg.tensor_publisher:main",\n'}
[10.258058] (sf_pkg) StdoutLine: {'line': b'            ^\n'}
[10.259884] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.262720] (sf_pkg) StdoutLine: {'line': b'./launch/sf.launch.py:4:1: E302 expected 2 blank lines, found 1\n'}
[10.276315] (sf_pkg) StdoutLine: {'line': b'def generate_launch_description():\n'}
[10.277064] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.277787] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.278436] (sf_pkg) StdoutLine: {'line': b"./launch/sf.launch.py:10:13: E265 block comment should start with '# '\n"}
[10.279099] (sf_pkg) StdoutLine: {'line': b"            #output= 'screen'\n"}
[10.279771] (sf_pkg) StdoutLine: {'line': b'            ^\n'}
[10.280495] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.281154] (sf_pkg) StdoutLine: {'line': b"./launch/sf.launch.py:21:32: E202 whitespace before ')'\n"}
[10.281828] (sf_pkg) StdoutLine: {'line': b"            name='cmd_selector' ),\n"}
[10.282781] (sf_pkg) StdoutLine: {'line': b'                               ^\n'}
[10.283610] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.296619] (sf_pkg) StdoutLine: {'line': b'./launch/sf.launch.py:27:20: E251 unexpected spaces around keyword / parameter equals\n'}
[10.297411] (sf_pkg) StdoutLine: {'line': b"            output= 'screen' )\n"}
[10.298212] (sf_pkg) StdoutLine: {'line': b'                   ^\n'}
[10.298853] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.299561] (sf_pkg) StdoutLine: {'line': b"./launch/sf.launch.py:27:29: E202 whitespace before ')'\n"}
[10.300393] (sf_pkg) StdoutLine: {'line': b"            output= 'screen' )\n"}
[10.300925] (sf_pkg) StdoutLine: {'line': b'                            ^\n'}
[10.301373] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.301775] (sf_pkg) StdoutLine: {'line': b'./launch/sf.launch.py:28:7: W292 no newline at end of file\n'}
[10.302298] (sf_pkg) StdoutLine: {'line': b'    ])      ^\n'}
[10.302841] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.303392] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/serial_talker.py:5:1: I100 Import statements are in the wrong order. 'import serial' should be before 'from std_msgs.msg import String'\n"}
[10.312619] (sf_pkg) StdoutLine: {'line': b'import serial \n'}
[10.313810] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.315790] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.330169] (-) TimerEvent: {}
[10.331771] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/serial_talker.py:5:14: W291 trailing whitespace\n'}
[10.333642] (sf_pkg) StdoutLine: {'line': b'import serial \n'}
[10.335762] (sf_pkg) StdoutLine: {'line': b'             ^\n'}
[10.338282] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.340805] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/serial_talker.py:11:5: E301 expected 1 blank line, found 0\n'}
[10.345582] (sf_pkg) StdoutLine: {'line': b'    def __init__(self):\n'}
[10.360916] (sf_pkg) StdoutLine: {'line': b'    ^\n'}
[10.363460] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.365814] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/serial_talker.py:19:32: Q000 Double quotes found but single quotes preferred\n'}
[10.367976] (sf_pkg) StdoutLine: {'line': b'        self.get_logger().info("Serial connection started")\n'}
[10.370176] (sf_pkg) StdoutLine: {'line': b'                               ^\n'}
[10.372422] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.373898] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/serial_talker.py:22:9: E265 block comment should start with '# '\n"}
[10.375299] (sf_pkg) StdoutLine: {'line': b'        #self.ser.write("^1*2*3*4*5*6*7*8*8".encode())\n'}
[10.376622] (sf_pkg) StdoutLine: {'line': b'        ^\n'}
[10.379175] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.384478] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/serial_talker.py:23:9: E265 block comment should start with '# '\n"}
[10.386470] (sf_pkg) StdoutLine: {'line': b"        #self.get_logger().info('Transmitted')\n"}
[10.392174] (sf_pkg) StdoutLine: {'line': b'        ^\n'}
[10.394609] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.397062] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/serial_talker.py:40:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[10.409634] (sf_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[10.411810] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.413674] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.415672] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/serial_talker.py:40:26: E203 whitespace before ':'\n"}
[10.419937] (sf_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[10.422238] (sf_pkg) StdoutLine: {'line': b'                         ^\n'}
[10.434041] (-) TimerEvent: {}
[10.435217] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.437494] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/serial_talker.py:41:11: W292 no newline at end of file\n'}
[10.439270] (sf_pkg) StdoutLine: {'line': b'    main()          ^\n'}
[10.441068] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.445036] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:5:1: E402 module level import not at top of file\n'}
[10.448825] (sf_pkg) StdoutLine: {'line': b'import smbus\n'}
[10.450908] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.453183] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.455504] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:6:1: E402 module level import not at top of file\n'}
[10.457682] (sf_pkg) StdoutLine: {'line': b'from time import sleep\n'}
[10.464042] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.468917] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.471092] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/I2C_LCD_driver.py:6:1: I100 Import statements are in the wrong order. 'from time import sleep' should be before 'import smbus' and in a different group.\n"}
[10.473697] (sf_pkg) StdoutLine: {'line': b'from time import sleep\n'}
[10.476079] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.478321] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.481584] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/I2C_LCD_driver.py:6:1: I201 Missing newline between import groups. 'from time import sleep' is identified as Stdlib and 'import smbus' is identified as Third Party.\n"}
[10.486094] (sf_pkg) StdoutLine: {'line': b'from time import sleep\n'}
[10.488045] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.490028] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.491975] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:7:1: E302 expected 2 blank lines, found 0\n'}
[10.500585] (sf_pkg) StdoutLine: {'line': b'class i2c_device:\n'}
[10.504284] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.508551] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.512911] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:8:1: CNL100 Class definition does not have a new line.\n'}
[10.514868] (sf_pkg) StdoutLine: {'line': b'   def __init__(self, addr, port=I2CBUS):\n'}
[10.518199] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.520767] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.522707] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:8:4: E111 indentation is not a multiple of four\n'}
[10.524950] (sf_pkg) StdoutLine: {'line': b'   def __init__(self, addr, port=I2CBUS):\n'}
[10.528676] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.533642] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.535683] (-) TimerEvent: {}
[10.538344] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:9:7: E111 indentation is not a multiple of four\n'}
[10.540477] (sf_pkg) StdoutLine: {'line': b'      self.addr = addr\n'}
[10.542818] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.546107] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.556111] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:10:7: E111 indentation is not a multiple of four\n'}
[10.559237] (sf_pkg) StdoutLine: {'line': b'      self.bus = smbus.SMBus(port)\n'}
[10.562113] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.564586] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.566284] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:12:4: E301 expected 1 blank line, found 0\n'}
[10.569214] (sf_pkg) StdoutLine: {'line': b'   def write_cmd(self, cmd):\n'}
[10.570891] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.572659] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.574335] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:12:4: E111 indentation is not a multiple of four\n'}
[10.576314] (sf_pkg) StdoutLine: {'line': b'   def write_cmd(self, cmd):\n'}
[10.580022] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.582720] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.586158] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:13:7: E111 indentation is not a multiple of four\n'}
[10.589014] (sf_pkg) StdoutLine: {'line': b'      self.bus.write_byte(self.addr, cmd)\n'}
[10.591816] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.594644] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.596238] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:14:7: E111 indentation is not a multiple of four\n'}
[10.598993] (sf_pkg) StdoutLine: {'line': b'      sleep(0.0001)\n'}
[10.601760] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.603279] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.608134] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:16:4: E301 expected 1 blank line, found 0\n'}
[10.609567] (sf_pkg) StdoutLine: {'line': b'   def write_cmd_arg(self, cmd, data):\n'}
[10.611039] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.612589] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.614023] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:16:4: E111 indentation is not a multiple of four\n'}
[10.615496] (sf_pkg) StdoutLine: {'line': b'   def write_cmd_arg(self, cmd, data):\n'}
[10.617621] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.620026] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.621805] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:17:7: E111 indentation is not a multiple of four\n'}
[10.623440] (sf_pkg) StdoutLine: {'line': b'      self.bus.write_byte_data(self.addr, cmd, data)\n'}
[10.625457] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.627369] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.629399] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:18:7: E111 indentation is not a multiple of four\n'}
[10.631293] (sf_pkg) StdoutLine: {'line': b'      sleep(0.0001)\n'}
[10.633301] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.635565] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.637366] (-) TimerEvent: {}
[10.639990] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:20:4: E301 expected 1 blank line, found 0\n'}
[10.642461] (sf_pkg) StdoutLine: {'line': b'   def write_block_data(self, cmd, data):\n'}
[10.644199] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.646589] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.648302] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:20:4: E111 indentation is not a multiple of four\n'}
[10.650021] (sf_pkg) StdoutLine: {'line': b'   def write_block_data(self, cmd, data):\n'}
[10.651999] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.654060] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.655974] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:21:7: E111 indentation is not a multiple of four\n'}
[10.657756] (sf_pkg) StdoutLine: {'line': b'      self.bus.write_block_data(self.addr, cmd, data)\n'}
[10.659490] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.661559] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.663785] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:22:7: E111 indentation is not a multiple of four\n'}
[10.665931] (sf_pkg) StdoutLine: {'line': b'      sleep(0.0001)\n'}
[10.667803] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.669528] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.671356] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:24:4: E301 expected 1 blank line, found 0\n'}
[10.673191] (sf_pkg) StdoutLine: {'line': b'   def read(self):\n'}
[10.675175] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.676718] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.678221] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:24:4: E111 indentation is not a multiple of four\n'}
[10.679841] (sf_pkg) StdoutLine: {'line': b'   def read(self):\n'}
[10.681387] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.682792] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.684302] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:25:7: E111 indentation is not a multiple of four\n'}
[10.685759] (sf_pkg) StdoutLine: {'line': b'      return self.bus.read_byte(self.addr)\n'}
[10.687210] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.688807] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.690297] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:27:4: E301 expected 1 blank line, found 0\n'}
[10.691667] (sf_pkg) StdoutLine: {'line': b'   def read_data(self, cmd):\n'}
[10.693177] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.694959] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.696780] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:27:4: E111 indentation is not a multiple of four\n'}
[10.698304] (sf_pkg) StdoutLine: {'line': b'   def read_data(self, cmd):\n'}
[10.700053] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.701476] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.702838] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:28:7: E111 indentation is not a multiple of four\n'}
[10.704381] (sf_pkg) StdoutLine: {'line': b'      return self.bus.read_byte_data(self.addr, cmd)\n'}
[10.705958] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.707357] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.708866] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:30:4: E301 expected 1 blank line, found 0\n'}
[10.710293] (sf_pkg) StdoutLine: {'line': b'   def read_block_data(self, cmd):\n'}
[10.711918] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.713993] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.715588] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:30:4: E111 indentation is not a multiple of four\n'}
[10.717180] (sf_pkg) StdoutLine: {'line': b'   def read_block_data(self, cmd):\n'}
[10.718722] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.720467] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.722394] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:31:7: E111 indentation is not a multiple of four\n'}
[10.723970] (sf_pkg) StdoutLine: {'line': b'      return self.bus.read_block_data(self.addr, cmd)\n'}
[10.725445] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.726883] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.728494] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:33:1: E305 expected 2 blank lines after class or function definition, found 0\n'}
[10.729818] (sf_pkg) StdoutLine: {'line': b'LCD_CLEARDISPLAY = 0x01\n'}
[10.731048] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.732452] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.733738] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:68:16: E261 at least two spaces before inline comment\n'}
[10.735021] (sf_pkg) StdoutLine: {'line': b'En = 0b00000100 # Enable bit\n'}
[10.736547] (sf_pkg) StdoutLine: {'line': b'               ^\n'}
[10.738320] (-) TimerEvent: {}
[10.740085] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.741779] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:69:16: E261 at least two spaces before inline comment\n'}
[10.743813] (sf_pkg) StdoutLine: {'line': b'Rw = 0b00000010 # Read/Write bit\n'}
[10.746618] (sf_pkg) StdoutLine: {'line': b'               ^\n'}
[10.748368] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.750045] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:70:16: E261 at least two spaces before inline comment\n'}
[10.751798] (sf_pkg) StdoutLine: {'line': b'Rs = 0b00000001 # Register select bit\n'}
[10.753593] (sf_pkg) StdoutLine: {'line': b'               ^\n'}
[10.755239] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.757334] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:71:1: E302 expected 2 blank lines, found 0\n'}
[10.758953] (sf_pkg) StdoutLine: {'line': b'class lcd:\n'}
[10.760664] (sf_pkg) StdoutLine: {'line': b'^\n'}
[10.762223] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.763848] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:72:4: E114 indentation is not a multiple of four (comment)\n'}
[10.765396] (sf_pkg) StdoutLine: {'line': b'   #initializes objects and lcd\n'}
[10.766869] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.768566] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.770028] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/I2C_LCD_driver.py:72:4: E265 block comment should start with '# '\n"}
[10.771635] (sf_pkg) StdoutLine: {'line': b'   #initializes objects and lcd\n'}
[10.773736] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.775213] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.776784] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:73:4: E111 indentation is not a multiple of four\n'}
[10.778137] (sf_pkg) StdoutLine: {'line': b'   def __init__(self):\n'}
[10.779349] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.780889] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.782527] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:74:7: E111 indentation is not a multiple of four\n'}
[10.784249] (sf_pkg) StdoutLine: {'line': b'      self.lcd_device = i2c_device(ADDRESS)\n'}
[10.786094] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.787680] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.789428] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:75:7: E111 indentation is not a multiple of four\n'}
[10.790877] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write(0x03)\n'}
[10.792228] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.793534] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.795274] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:76:7: E111 indentation is not a multiple of four\n'}
[10.796842] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write(0x03)\n'}
[10.798697] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.800231] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.801906] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:77:7: E111 indentation is not a multiple of four\n'}
[10.803450] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write(0x03)\n'}
[10.805034] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.806647] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.816606] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:78:7: E111 indentation is not a multiple of four\n'}
[10.818875] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write(0x02)\n'}
[10.820896] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.824067] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.826835] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:79:7: E111 indentation is not a multiple of four\n'}
[10.828365] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write(LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS | LCD_4BITMODE)\n'}
[10.840617] (-) TimerEvent: {}
[10.841432] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.843113] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.845081] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:80:7: E111 indentation is not a multiple of four\n'}
[10.846820] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write(LCD_DISPLAYCONTROL | LCD_DISPLAYON)\n'}
[10.848797] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.850743] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.852629] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:81:7: E111 indentation is not a multiple of four\n'}
[10.854176] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write(LCD_CLEARDISPLAY)\n'}
[10.855651] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.869359] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.871088] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:82:7: E111 indentation is not a multiple of four\n'}
[10.872955] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write(LCD_ENTRYMODESET | LCD_ENTRYLEFT)\n'}
[10.875374] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.877471] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.879695] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:83:7: E111 indentation is not a multiple of four\n'}
[10.881278] (sf_pkg) StdoutLine: {'line': b'      sleep(0.2)\n'}
[10.883015] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.884921] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.886586] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:84:4: E114 indentation is not a multiple of four (comment)\n'}
[10.901489] (sf_pkg) StdoutLine: {'line': b'   # clocks EN to latch command\n'}
[10.903389] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.905302] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.907070] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:85:4: E301 expected 1 blank line, found 0\n'}
[10.908803] (sf_pkg) StdoutLine: {'line': b'   def lcd_strobe(self, data):\n'}
[10.910385] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.911784] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.913929] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:85:4: E111 indentation is not a multiple of four\n'}
[10.915834] (sf_pkg) StdoutLine: {'line': b'   def lcd_strobe(self, data):\n'}
[10.917640] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.919499] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.928071] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:86:7: E111 indentation is not a multiple of four\n'}
[10.929723] (sf_pkg) StdoutLine: {'line': b'      self.lcd_device.write_cmd(data | En | LCD_BACKLIGHT)\n'}
[10.931429] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.933303] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.935072] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:87:7: E111 indentation is not a multiple of four\n'}
[10.936734] (sf_pkg) StdoutLine: {'line': b'      sleep(.0005)\n'}
[10.949331] (-) TimerEvent: {}
[10.950204] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.951890] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.953573] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:88:7: E111 indentation is not a multiple of four\n'}
[10.955086] (sf_pkg) StdoutLine: {'line': b'      self.lcd_device.write_cmd(((data & ~En) | LCD_BACKLIGHT))\n'}
[10.956684] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.958110] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.959333] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:89:7: E111 indentation is not a multiple of four\n'}
[10.961400] (sf_pkg) StdoutLine: {'line': b'      sleep(.0001)\n'}
[10.963786] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[10.976669] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.978450] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:90:4: E301 expected 1 blank line, found 0\n'}
[10.979513] (sf_pkg) StdoutLine: {'line': b'   def lcd_write_four_bits(self, data):\n'}
[10.980813] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.982670] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.985336] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:90:4: E111 indentation is not a multiple of four\n'}
[10.987021] (sf_pkg) StdoutLine: {'line': b'   def lcd_write_four_bits(self, data):\n'}
[10.988763] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[10.990333] (sf_pkg) StdoutLine: {'line': b'\n'}
[10.991846] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:91:7: E111 indentation is not a multiple of four\n'}
[11.004078] (sf_pkg) StdoutLine: {'line': b'      self.lcd_device.write_cmd(data | LCD_BACKLIGHT)\n'}
[11.006493] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.008432] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.009955] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:92:7: E111 indentation is not a multiple of four\n'}
[11.011761] (sf_pkg) StdoutLine: {'line': b'      self.lcd_strobe(data)\n'}
[11.013432] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.015324] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.017078] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:93:4: E114 indentation is not a multiple of four (comment)\n'}
[11.018847] (sf_pkg) StdoutLine: {'line': b'   # write a command to lcd\n'}
[11.032026] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.033705] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.035885] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:94:4: E301 expected 1 blank line, found 0\n'}
[11.037547] (sf_pkg) StdoutLine: {'line': b'   def lcd_write(self, cmd, mode=0):\n'}
[11.038983] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.040505] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.042430] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:94:4: E111 indentation is not a multiple of four\n'}
[11.044718] (sf_pkg) StdoutLine: {'line': b'   def lcd_write(self, cmd, mode=0):\n'}
[11.047133] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.048554] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.050208] (-) TimerEvent: {}
[11.051259] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:95:7: E111 indentation is not a multiple of four\n'}
[11.052866] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write_four_bits(mode | (cmd & 0xF0))\n'}
[11.054526] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.056167] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.057771] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:96:7: E111 indentation is not a multiple of four\n'}
[11.059841] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write_four_bits(mode | ((cmd << 4) & 0xF0))\n'}
[11.061538] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.063558] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.065546] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:97:4: E114 indentation is not a multiple of four (comment)\n'}
[11.067333] (sf_pkg) StdoutLine: {'line': b'   # write a character to lcd (or character rom) 0x09: backlight | RS=DR<\n'}
[11.069160] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.070894] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.072594] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:98:4: E114 indentation is not a multiple of four (comment)\n'}
[11.075051] (sf_pkg) StdoutLine: {'line': b'   # works!\n'}
[11.077949] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.079626] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.081246] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:99:4: E301 expected 1 blank line, found 0\n'}
[11.082976] (sf_pkg) StdoutLine: {'line': b'   def lcd_write_char(self, charvalue, mode=1):\n'}
[11.084613] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.086006] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.087473] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:99:4: E111 indentation is not a multiple of four\n'}
[11.089206] (sf_pkg) StdoutLine: {'line': b'   def lcd_write_char(self, charvalue, mode=1):\n'}
[11.091056] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.092617] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.094071] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:100:7: E111 indentation is not a multiple of four\n'}
[11.095740] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write_four_bits(mode | (charvalue & 0xF0))\n'}
[11.097310] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.098924] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.100463] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:101:7: E111 indentation is not a multiple of four\n'}
[11.101986] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write_four_bits(mode | ((charvalue << 4) & 0xF0))\n'}
[11.103599] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.105411] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.107222] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:102:1: W293 blank line contains whitespace\n'}
[11.108859] (sf_pkg) StdoutLine: {'line': b'  \n'}
[11.110426] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.112417] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.114213] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:103:4: E114 indentation is not a multiple of four (comment)\n'}
[11.115936] (sf_pkg) StdoutLine: {'line': b'   # put string function with optional char positioning\n'}
[11.117697] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.119794] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.122334] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:104:4: E111 indentation is not a multiple of four\n'}
[11.124701] (sf_pkg) StdoutLine: {'line': b'   def lcd_display_string(self, string, line=1, pos=0):\n'}
[11.127232] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.130108] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.132722] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:106:7: E111 indentation is not a multiple of four\n'}
[11.135874] (sf_pkg) StdoutLine: {'line': b'      pos_new = pos\n'}
[11.138534] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.147218] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.149303] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:108:7: E111 indentation is not a multiple of four\n'}
[11.151117] (-) TimerEvent: {}
[11.152056] (sf_pkg) StdoutLine: {'line': b'      pos_new = 0x40 + pos\n'}
[11.153935] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.155690] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.157465] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:110:7: E111 indentation is not a multiple of four\n'}
[11.159182] (sf_pkg) StdoutLine: {'line': b'      pos_new = 0x14 + pos\n'}
[11.160857] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.162375] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.164232] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:112:7: E111 indentation is not a multiple of four\n'}
[11.165893] (sf_pkg) StdoutLine: {'line': b'      pos_new = 0x54 + pos\n'}
[11.167572] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.169525] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.171451] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:115:7: E111 indentation is not a multiple of four\n'}
[11.173403] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write(ord(char), Rs)\n'}
[11.175287] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.177639] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.180247] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:116:4: E114 indentation is not a multiple of four (comment)\n'}
[11.182574] (sf_pkg) StdoutLine: {'line': b'   # clear lcd and set to home\n'}
[11.184710] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.186414] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.187632] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:117:4: E301 expected 1 blank line, found 0\n'}
[11.189459] (sf_pkg) StdoutLine: {'line': b'   def lcd_clear(self):\n'}
[11.191295] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.205276] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.206764] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:117:4: E111 indentation is not a multiple of four\n'}
[11.219994] (sf_pkg) StdoutLine: {'line': b'   def lcd_clear(self):\n'}
[11.221563] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.222970] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.224463] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:118:7: E111 indentation is not a multiple of four\n'}
[11.226496] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write(LCD_CLEARDISPLAY)\n'}
[11.228840] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.231081] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.233539] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:119:7: E111 indentation is not a multiple of four\n'}
[11.236055] (sf_pkg) StderrLine: {'line': b'\x1b[33m=============================== warnings summary ===============================\x1b[0m\n'}
[11.238668] (sf_pkg) StderrLine: {'line': b'../../../.local/lib/python3.8/site-packages/_pytest/nodes.py:633\n'}
[11.252715] (-) TimerEvent: {}
[11.253600] (sf_pkg) StderrLine: {'line': b'  Warning: The (fspath: py.path.local) argument to Package is deprecated. Please use the (path: pathlib.Path) argument instead.\n'}
[11.255374] (sf_pkg) StderrLine: {'line': b'  See https://docs.pytest.org/en/latest/deprecations.html#fspath-argument-for-node-constructors-replaced-with-pathlib-path\n'}
[11.257376] (sf_pkg) StderrLine: {'line': b'\n'}
[11.259586] (sf_pkg) StderrLine: {'line': b'../../../../../opt/ros/foxy/lib/python3.8/site-packages/launch_testing/pytest/hooks.py:179\n'}
[11.261168] (sf_pkg) StderrLine: {'line': b'../../../../../opt/ros/foxy/lib/python3.8/site-packages/launch_testing/pytest/hooks.py:179\n'}
[11.262929] (sf_pkg) StderrLine: {'line': b'../../../../../opt/ros/foxy/lib/python3.8/site-packages/launch_testing/pytest/hooks.py:179\n'}
[11.264760] (sf_pkg) StderrLine: {'line': b'  Warning: The (fspath: py.path.local) argument to Module is deprecated. Please use the (path: pathlib.Path) argument instead.\n'}
[11.267053] (sf_pkg) StderrLine: {'line': b'  See https://docs.pytest.org/en/latest/deprecations.html#fspath-argument-for-node-constructors-replaced-with-pathlib-path\n'}
[11.268606] (sf_pkg) StderrLine: {'line': b'\n'}
[11.269948] (sf_pkg) StderrLine: {'line': b'../../../../../usr/lib/python3/dist-packages/pydocstyle/config.py:6\n'}
[11.271333] (sf_pkg) StderrLine: {'line': b"  Warning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n"}
[11.284761] (sf_pkg) StderrLine: {'line': b'\n'}
[11.286682] (sf_pkg) StderrLine: {'line': b'-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n'}
[11.288537] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write(LCD_RETURNHOME)\n'}
[11.289862] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.291122] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.292472] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:120:4: E114 indentation is not a multiple of four (comment)\n'}
[11.293706] (sf_pkg) StdoutLine: {'line': b'   # define backlight on/off (lcd.backlight(1); off= lcd.backlight(0)\n'}
[11.295214] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.296871] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.298597] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:121:4: E301 expected 1 blank line, found 0\n'}
[11.300398] (sf_pkg) StdoutLine: {'line': b'   def backlight(self, state): # for state, 1 = on, 0 = off\n'}
[11.302044] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.312640] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.314145] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:121:4: E111 indentation is not a multiple of four\n'}
[11.315549] (sf_pkg) StdoutLine: {'line': b'   def backlight(self, state): # for state, 1 = on, 0 = off\n'}
[11.317389] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.319247] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.321129] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:121:31: E261 at least two spaces before inline comment\n'}
[11.322984] (sf_pkg) StdoutLine: {'line': b'   def backlight(self, state): # for state, 1 = on, 0 = off\n'}
[11.324636] (sf_pkg) StdoutLine: {'line': b'                              ^\n'}
[11.325995] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.337231] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:122:7: E111 indentation is not a multiple of four\n'}
[11.339887] (sf_pkg) StdoutLine: {'line': b'      if state == 1:\n'}
[11.341670] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.343147] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.344773] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:123:10: E111 indentation is not a multiple of four\n'}
[11.346214] (sf_pkg) StdoutLine: {'line': b'         self.lcd_device.write_cmd(LCD_BACKLIGHT)\n'}
[11.348029] (sf_pkg) StdoutLine: {'line': b'         ^\n'}
[11.349868] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.364040] (-) TimerEvent: {}
[11.365260] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:124:7: E111 indentation is not a multiple of four\n'}
[11.367965] (sf_pkg) StdoutLine: {'line': b'      elif state == 0:\n'}
[11.369506] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.370865] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.372314] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:125:10: E111 indentation is not a multiple of four\n'}
[11.374236] (sf_pkg) StdoutLine: {'line': b'         self.lcd_device.write_cmd(LCD_NOBACKLIGHT)\n'}
[11.375860] (sf_pkg) StdoutLine: {'line': b'         ^\n'}
[11.377308] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.378976] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:126:4: E114 indentation is not a multiple of four (comment)\n'}
[11.380460] (sf_pkg) StdoutLine: {'line': b'   # add custom characters (0 - 7)\n'}
[11.381490] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.382618] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.384197] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:127:4: E301 expected 1 blank line, found 0\n'}
[11.397102] (sf_pkg) StdoutLine: {'line': b'   def lcd_load_custom_chars(self, fontdata):\n'}
[11.398533] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.399987] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.401571] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:127:4: E111 indentation is not a multiple of four\n'}
[11.403431] (sf_pkg) StdoutLine: {'line': b'   def lcd_load_custom_chars(self, fontdata):\n'}
[11.405606] (sf_pkg) StdoutLine: {'line': b'   ^\n'}
[11.407491] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.409201] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:128:7: E111 indentation is not a multiple of four\n'}
[11.411232] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write(0x40);\n'}
[11.413081] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.424002] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.425841] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:128:27: E703 statement ends with a semicolon\n'}
[11.427622] (sf_pkg) StdoutLine: {'line': b'      self.lcd_write(0x40);\n'}
[11.429399] (sf_pkg) StdoutLine: {'line': b'                          ^\n'}
[11.431081] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.433007] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:129:7: E111 indentation is not a multiple of four\n'}
[11.435358] (sf_pkg) StdoutLine: {'line': b'      for char in fontdata:\n'}
[11.437685] (sf_pkg) StdoutLine: {'line': b'      ^\n'}
[11.439406] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.457490] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:130:10: E111 indentation is not a multiple of four\n'}
[11.459355] (sf_pkg) StdoutLine: {'line': b'         for line in char:\n'}
[11.461581] (sf_pkg) StdoutLine: {'line': b'         ^\n'}
[11.463893] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.465650] (-) TimerEvent: {}
[11.466575] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/I2C_LCD_driver.py:131:41: W292 no newline at end of file\n'}
[11.468348] (sf_pkg) StdoutLine: {'line': b'            self.lcd_write_char(line)                                           ^\n'}
[11.488911] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.490702] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/cmd_selector.py:6:1: E302 expected 2 blank lines, found 1\n'}
[11.492554] (sf_pkg) StdoutLine: {'line': b'class CommandSelector(Node):\n'}
[11.494242] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.496125] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.497873] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/cmd_selector.py:8:5: E301 expected 1 blank line, found 0\n'}
[11.499622] (sf_pkg) StdoutLine: {'line': b'    def __init__(self):\n'}
[11.501540] (sf_pkg) StdoutLine: {'line': b'    ^\n'}
[11.504351] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.506293] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/cmd_selector.py:43:1: E303 too many blank lines (3)\n'}
[11.516927] (sf_pkg) StdoutLine: {'line': b'def main(args=None):\n'}
[11.518649] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.520435] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.522208] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/cmd_selector.py:54:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[11.523929] (sf_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[11.525837] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.527470] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.529158] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/cmd_selector.py:54:26: E203 whitespace before ':'\n"}
[11.540587] (sf_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[11.542324] (sf_pkg) StdoutLine: {'line': b'                         ^\n'}
[11.544012] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.545859] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/cmd_selector.py:55:11: W292 no newline at end of file\n'}
[11.547658] (sf_pkg) StdoutLine: {'line': b'    main()          ^\n'}
[11.549427] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.551312] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/calculator.py:5:1: I100 Import statements are in the wrong order. 'import math' should be before 'from std_msgs.msg import String' and in a different group.\n"}
[11.553067] (sf_pkg) StdoutLine: {'line': b'import math\n'}
[11.554709] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.564065] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.565772] (-) TimerEvent: {}
[11.566622] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/calculator.py:5:1: I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from std_msgs.msg import String' is identified as Third Party.\n"}
[11.568504] (sf_pkg) StdoutLine: {'line': b'import math\n'}
[11.570304] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.572077] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.573808] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/calculator.py:7:1: E302 expected 2 blank lines, found 1\n'}
[11.575564] (sf_pkg) StdoutLine: {'line': b'class Calculator(Node) :\n'}
[11.580901] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.582646] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.584427] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/calculator.py:7:23: E203 whitespace before ':'\n"}
[11.602253] (sf_pkg) StdoutLine: {'line': b'class Calculator(Node) :\n'}
[11.603056] (sf_pkg) StdoutLine: {'line': b'                      ^\n'}
[11.603850] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.604518] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/calculator.py:8:1: CNL100 Class definition does not have a new line.\n'}
[11.605133] (sf_pkg) StdoutLine: {'line': b'    def __init__(self):\n'}
[11.605813] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.606451] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.607095] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/calculator.py:21:35: E203 whitespace before ':'\n"}
[11.608733] (sf_pkg) StdoutLine: {'line': b'    def publish_command(self, cmd) :\n'}
[11.610495] (sf_pkg) StdoutLine: {'line': b'                                  ^\n'}
[11.612395] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.614273] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/calculator.py:33:30: E201 whitespace after '('\n"}
[11.616388] (sf_pkg) StdoutLine: {'line': b'        self.publish_command( "*" + f\'{cmd}\')\n'}
[11.618515] (sf_pkg) StdoutLine: {'line': b'                             ^\n'}
[11.621428] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.623596] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/calculator.py:33:31: Q000 Double quotes found but single quotes preferred\n'}
[11.625312] (sf_pkg) StdoutLine: {'line': b'        self.publish_command( "*" + f\'{cmd}\')\n'}
[11.626966] (sf_pkg) StdoutLine: {'line': b'                              ^\n'}
[11.628704] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.630375] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/calculator.py:36:61: C417 Unnecessary use of map - use a generator expression instead.\n'}
[11.632958] (sf_pkg) StdoutLine: {'line': b'        n_x, n_y, n_con, l_x, l_y, l_con, r_x, r_y, r_con = map(lambda x: int(x), tensor)\n'}
[11.634639] (sf_pkg) StdoutLine: {'line': b'                                                            ^\n'}
[11.636117] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.637592] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/calculator.py:62:1: W293 blank line contains whitespace\n'}
[11.639032] (sf_pkg) StdoutLine: {'line': b'    \n'}
[11.640931] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.643879] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.645306] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/calculator.py:65:10: E203 whitespace before ','\n"}
[11.646705] (sf_pkg) StdoutLine: {'line': b'        _ , nose_x, nose_confidence = map(lambda x: int(x), nose)\n'}
[11.648205] (sf_pkg) StdoutLine: {'line': b'         ^\n'}
[11.649736] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.651388] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/calculator.py:65:39: C417 Unnecessary use of map - use a generator expression instead.\n'}
[11.653208] (sf_pkg) StdoutLine: {'line': b'        _ , nose_x, nose_confidence = map(lambda x: int(x), nose)\n'}
[11.655049] (sf_pkg) StdoutLine: {'line': b'                                      ^\n'}
[11.656812] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.658367] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/calculator.py:74:31: E272 multiple spaces before keyword\n'}
[11.659992] (sf_pkg) StdoutLine: {'line': b'            elif (nose_x == 2)  or (nose_x == 3) or (nose_x == 4):\n'}
[11.661212] (sf_pkg) StdoutLine: {'line': b'                              ^\n'}
[11.662488] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.664189] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/calculator.py:82:1: W293 blank line contains whitespace\n'}
[11.665462] (sf_pkg) StdoutLine: {'line': b'    \n'}
[11.666966] (-) TimerEvent: {}
[11.668065] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.669899] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.671537] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/calculator.py:83:28: E203 whitespace before ':'\n"}
[11.673282] (sf_pkg) StdoutLine: {'line': b'    def eye_dist(self, eye) :\n'}
[11.675143] (sf_pkg) StdoutLine: {'line': b'                           ^\n'}
[11.676881] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.678611] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/calculator.py:84:40: C417 Unnecessary use of map - use a generator expression instead.\n'}
[11.680409] (sf_pkg) StdoutLine: {'line': b'        l_x, l_y, l_c, r_x, r_y, r_c = map(lambda x : x, eye)\n'}
[11.682005] (sf_pkg) StdoutLine: {'line': b'                                       ^\n'}
[11.683577] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.685352] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/calculator.py:84:52: E203 whitespace before ':'\n"}
[11.686945] (sf_pkg) StdoutLine: {'line': b'        l_x, l_y, l_c, r_x, r_y, r_c = map(lambda x : x, eye)\n'}
[11.688575] (sf_pkg) StdoutLine: {'line': b'                                                   ^\n'}
[11.690020] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.691418] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/calculator.py:86:9: E115 expected an indented block (comment)\n'}
[11.693012] (sf_pkg) StdoutLine: {'line': b'        # length\xeb\xa5\xbc float\xec\x9c\xbc\xeb\xa1\x9c \xeb\xb3\xb4\xeb\x82\xb4\xeb\x8f\x84 \xeb\x90\x98\xec\xa5\xac?\n'}
[11.694113] (sf_pkg) StdoutLine: {'line': b'        ^\n'}
[11.695145] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.696935] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/calculator.py:88:13: E203 whitespace before ':'\n"}
[11.698672] (sf_pkg) StdoutLine: {'line': b'        else :\n'}
[11.700100] (sf_pkg) StdoutLine: {'line': b'            ^\n'}
[11.701685] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.703197] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/calculator.py:92:1: E302 expected 2 blank lines, found 1\n'}
[11.704924] (sf_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[11.706571] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.708169] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.709670] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/calculator.py:92:20: E203 whitespace before ':'\n"}
[11.711248] (sf_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[11.712987] (sf_pkg) StdoutLine: {'line': b'                   ^\n'}
[11.714783] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.716468] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/calculator.py:103:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[11.719354] (sf_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[11.722166] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.723690] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.725134] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/calculator.py:103:26: E203 whitespace before ':'\n"}
[11.726446] (sf_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[11.727813] (sf_pkg) StdoutLine: {'line': b'                         ^\n'}
[11.729251] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.730617] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/calculator.py:104:11: W292 no newline at end of file\n'}
[11.732373] (sf_pkg) StdoutLine: {'line': b'    main()          ^\n'}
[11.733728] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.734970] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor.py:5:1: I100 Import statements are in the wrong order. 'import cv2' should be before 'from sunflower_interfaces.msg import TfliteResult'\n"}
[11.736612] (sf_pkg) StdoutLine: {'line': b'import cv2\n'}
[11.738047] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.739397] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.741075] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor.py:7:1: I100 Import statements are in the wrong order. 'import numpy' should be before 'import tensorflow'\n"}
[11.742483] (sf_pkg) StdoutLine: {'line': b'import numpy as np\n'}
[11.743821] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.745330] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.747060] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor.py:9:1: E302 expected 2 blank lines, found 1\n'}
[11.748975] (sf_pkg) StdoutLine: {'line': b'class Tensor(Node) :\n'}
[11.750922] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.752776] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.754492] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor.py:9:19: E203 whitespace before ':'\n"}
[11.756094] (sf_pkg) StdoutLine: {'line': b'class Tensor(Node) :\n'}
[11.757588] (sf_pkg) StdoutLine: {'line': b'                  ^\n'}
[11.759228] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.760868] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor.py:10:1: CNL100 Class definition does not have a new line.\n'}
[11.762709] (sf_pkg) StdoutLine: {'line': b'    def __init__(self, interpreter, cap):\n'}
[11.764965] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.766607] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.768214] (-) TimerEvent: {}
[11.769039] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor.py:20:46: E203 whitespace before ':'\n"}
[11.770779] (sf_pkg) StdoutLine: {'line': b'    def tensor_result(self, interpreter, cap) :\n'}
[11.772593] (sf_pkg) StdoutLine: {'line': b'                                             ^\n'}
[11.774235] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.776048] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor.py:41:9: F841 local variable 'data' is assigned to but never used\n"}
[11.777823] (sf_pkg) StdoutLine: {'line': b'        data = list()\n'}
[11.779405] (sf_pkg) StdoutLine: {'line': b'        ^\n'}
[11.782198] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.784707] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor.py:41:16: C408 Unnecessary list call - rewrite as a literal.\n'}
[11.786291] (sf_pkg) StdoutLine: {'line': b'        data = list()\n'}
[11.788264] (sf_pkg) StdoutLine: {'line': b'               ^\n'}
[11.789852] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.791243] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor.py:53:1: E302 expected 2 blank lines, found 1\n'}
[11.792738] (sf_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[11.794086] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.796132] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.797708] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor.py:53:20: E203 whitespace before ':'\n"}
[11.799314] (sf_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[11.801147] (sf_pkg) StdoutLine: {'line': b'                   ^\n'}
[11.802653] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.804253] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor.py:55:50: Q000 Double quotes found but single quotes preferred\n'}
[11.805785] (sf_pkg) StdoutLine: {'line': b'    interpreter = tf.lite.Interpreter(model_path="lite-model_movenet_singlepose_lightning_3.tflite")\n'}
[11.807266] (sf_pkg) StdoutLine: {'line': b'                                                 ^\n'}
[11.809152] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.810774] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor.py:55:100: E501 line too long (100 > 99 characters)\n'}
[11.812378] (sf_pkg) StdoutLine: {'line': b'    interpreter = tf.lite.Interpreter(model_path="lite-model_movenet_singlepose_lightning_3.tflite")\n'}
[11.813748] (sf_pkg) StdoutLine: {'line': b'                                                                                                   ^\n'}
[11.815226] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.816676] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor.py:67:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[11.818246] (sf_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[11.819934] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.821677] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.823249] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor.py:67:26: E203 whitespace before ':'\n"}
[11.825344] (sf_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[11.827037] (sf_pkg) StdoutLine: {'line': b'                         ^\n'}
[11.828646] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.829967] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor.py:70:1: E265 block comment should start with '# '\n"}
[11.831412] (sf_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8^\n'}
[11.837098] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.838560] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor.py:70:29: W292 no newline at end of file\n'}
[11.839854] (sf_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8                            ^\n'}
[11.841236] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.842506] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor.py:70:29: W292 no newline at end of file\n'}
[11.853646] (sf_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8                            ^\n'}
[11.855671] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.857316] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor.py:70:29: W292 no newline at end of file\n'}
[11.858815] (sf_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8                            ^\n'}
[11.860478] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.862086] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:5:1: I100 Import statements are in the wrong order. 'import cv2' should be before 'from std_msgs.msg import String'\n"}
[11.863735] (sf_pkg) StdoutLine: {'line': b'import cv2\n'}
[11.865519] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.867004] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.881005] (-) TimerEvent: {}
[11.881810] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:7:1: I100 Import statements are in the wrong order. 'import numpy' should be before 'import tensorflow'\n"}
[11.883699] (sf_pkg) StdoutLine: {'line': b'import numpy as np\n'}
[11.885314] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.886731] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.888312] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:8:1: I100 Import statements are in the wrong order. 'import time' should be before 'import numpy' and in a different group.\n"}
[11.889926] (sf_pkg) StdoutLine: {'line': b'import time\n'}
[11.891483] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.893250] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.894857] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:8:1: I201 Missing newline between import groups. 'import time' is identified as Stdlib and 'import numpy' is identified as Third Party.\n"}
[11.896634] (sf_pkg) StdoutLine: {'line': b'import time\n'}
[11.898216] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.899741] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.912482] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:9:1: I201 Missing newline between import groups. 'import I2C_LCD_driver' is identified as Third Party and 'import time' is identified as Stdlib.\n"}
[11.913986] (sf_pkg) StdoutLine: {'line': b'import I2C_LCD_driver\n'}
[11.915930] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.917446] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.918864] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:13:28: E203 whitespace before ':'\n"}
[11.920275] (sf_pkg) StdoutLine: {'line': b'class TensorPublisher(Node) :\n'}
[11.921902] (sf_pkg) StdoutLine: {'line': b'                           ^\n'}
[11.923606] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.925204] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:14:1: CNL100 Class definition does not have a new line.\n'}
[11.926638] (sf_pkg) StdoutLine: {'line': b'    def __init__(self, interpreter, cap, mylcd):\n'}
[11.928372] (sf_pkg) StdoutLine: {'line': b'^\n'}
[11.930534] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.945158] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:18:34: Q000 Double quotes found but single quotes preferred\n'}
[11.946780] (sf_pkg) StdoutLine: {'line': b'        mylcd.lcd_display_string("",2)\n'}
[11.948515] (sf_pkg) StdoutLine: {'line': b'                                 ^\n'}
[11.950184] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.951897] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:18:36: E231 missing whitespace after ','\n"}
[11.953546] (sf_pkg) StdoutLine: {'line': b'        mylcd.lcd_display_string("",2)\n'}
[11.955118] (sf_pkg) StdoutLine: {'line': b'                                   ^\n'}
[11.956903] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.958253] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:25:16: Q000 Double quotes found but single quotes preferred\n'}
[11.959501] (sf_pkg) StdoutLine: {'line': b'        data = "!"+ \'{0:0^3}\'.format(f\'{small}\') + \'{0:0^3}\'.format(f\'{big}\') +"!"\n'}
[11.961100] (sf_pkg) StdoutLine: {'line': b'               ^\n'}
[11.962429] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.964629] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:25:19: E225 missing whitespace around operator\n'}
[11.968488] (sf_pkg) StdoutLine: {'line': b'        data = "!"+ \'{0:0^3}\'.format(f\'{small}\') + \'{0:0^3}\'.format(f\'{big}\') +"!"\n'}
[11.969925] (sf_pkg) StdoutLine: {'line': b'                  ^\n'}
[11.984406] (-) TimerEvent: {}
[11.985310] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.987172] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:25:80: E225 missing whitespace around operator\n'}
[11.988995] (sf_pkg) StdoutLine: {'line': b'        data = "!"+ \'{0:0^3}\'.format(f\'{small}\') + \'{0:0^3}\'.format(f\'{big}\') +"!"\n'}
[11.990687] (sf_pkg) StdoutLine: {'line': b'                                                                               ^\n'}
[11.992140] (sf_pkg) StdoutLine: {'line': b'\n'}
[11.994210] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:25:80: Q000 Double quotes found but single quotes preferred\n'}
[11.996184] (sf_pkg) StdoutLine: {'line': b'        data = "!"+ \'{0:0^3}\'.format(f\'{small}\') + \'{0:0^3}\'.format(f\'{big}\') +"!"\n'}
[11.998580] (sf_pkg) StdoutLine: {'line': b'                                                                               ^\n'}
[12.000862] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.005406] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:27:34: Q000 Double quotes found but single quotes preferred\n'}
[12.008490] (sf_pkg) StdoutLine: {'line': b'        mylcd.lcd_display_string("",2)\n'}
[12.020821] (sf_pkg) StdoutLine: {'line': b'                                 ^\n'}
[12.022166] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.023480] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:27:36: E231 missing whitespace after ','\n"}
[12.026166] (sf_pkg) StdoutLine: {'line': b'        mylcd.lcd_display_string("",2)\n'}
[12.028121] (sf_pkg) StdoutLine: {'line': b'                                   ^\n'}
[12.029739] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.031158] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:28:34: Q000 Double quotes found but single quotes preferred\n'}
[12.032680] (sf_pkg) StdoutLine: {'line': b'        mylcd.lcd_display_string("Started",2)\n'}
[12.034295] (sf_pkg) StdoutLine: {'line': b'                                 ^\n'}
[12.035613] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.047983] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:28:43: E231 missing whitespace after ','\n"}
[12.049765] (sf_pkg) StdoutLine: {'line': b'        mylcd.lcd_display_string("Started",2)\n'}
[12.051315] (sf_pkg) StdoutLine: {'line': b'                                          ^\n'}
[12.052888] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.054414] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:33:50: E203 whitespace before ':'\n"}
[12.055784] (sf_pkg) StdoutLine: {'line': b'    def max_tensor(self, interpreter, cap, mylcd) :\n'}
[12.057165] (sf_pkg) StdoutLine: {'line': b'                                                 ^\n'}
[12.058267] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.059371] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:37:16: F821 undefined name 'now'\n"}
[12.060776] (sf_pkg) StdoutLine: {'line': b'        while (now <= 5) and cap.isOpened() :\n'}
[12.062669] (sf_pkg) StdoutLine: {'line': b'               ^\n'}
[12.064343] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.066109] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:37:44: E203 whitespace before ':'\n"}
[12.067891] (sf_pkg) StdoutLine: {'line': b'        while (now <= 5) and cap.isOpened() :\n'}
[12.069805] (sf_pkg) StdoutLine: {'line': b'                                           ^\n'}
[12.071508] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.073027] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:40:38: Q000 Double quotes found but single quotes preferred\n'}
[12.074481] (sf_pkg) StdoutLine: {'line': b'            mylcd.lcd_display_string("",2)\n'}
[12.076210] (sf_pkg) StdoutLine: {'line': b'                                     ^\n'}
[12.078019] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.079412] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:40:40: E231 missing whitespace after ','\n"}
[12.080858] (sf_pkg) StdoutLine: {'line': b'            mylcd.lcd_display_string("",2)\n'}
[12.082270] (sf_pkg) StdoutLine: {'line': b'                                       ^\n'}
[12.083828] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.085230] (-) TimerEvent: {}
[12.086051] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:41:61: E231 missing whitespace after ','\n"}
[12.087628] (sf_pkg) StdoutLine: {'line': b"            mylcd.lcd_display_string(f'Started in {now} sec',2)\n"}
[12.089404] (sf_pkg) StdoutLine: {'line': b'                                                            ^\n'}
[12.090816] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.092266] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:58:20: C408 Unnecessary list call - rewrite as a literal.\n'}
[12.093824] (sf_pkg) StdoutLine: {'line': b'            data = list()\n'}
[12.095360] (sf_pkg) StdoutLine: {'line': b'                   ^\n'}
[12.097230] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.099123] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:60:32: E203 whitespace before ':'\n"}
[12.100683] (sf_pkg) StdoutLine: {'line': b'            for shape in shaped :\n'}
[12.102145] (sf_pkg) StdoutLine: {'line': b'                               ^\n'}
[12.103587] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.105170] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:62:44: C417 Unnecessary use of map - use a generator expression instead.\n'}
[12.106727] (sf_pkg) StdoutLine: {'line': b'            l_x, l_y, l_c, r_x, r_y, r_c = map(lambda x : x, data)\n'}
[12.108271] (sf_pkg) StdoutLine: {'line': b'                                           ^\n'}
[12.109651] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.110962] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:62:56: E203 whitespace before ':'\n"}
[12.112571] (sf_pkg) StdoutLine: {'line': b'            l_x, l_y, l_c, r_x, r_y, r_c = map(lambda x : x, data)\n'}
[12.114058] (sf_pkg) StdoutLine: {'line': b'                                                       ^\n'}
[12.115659] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.117849] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:64:13: E115 expected an indented block (comment)\n'}
[12.119413] (sf_pkg) StdoutLine: {'line': b'            # length\xeb\xa5\xbc float\xec\x9c\xbc\xeb\xa1\x9c \xeb\xb3\xb4\xeb\x82\xb4\xeb\x8f\x84 \xeb\x90\x98\xec\xa5\xac?\n'}
[12.121013] (sf_pkg) StdoutLine: {'line': b'            ^\n'}
[12.122323] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.123318] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:68:13: E203 whitespace before ':'\n"}
[12.124582] (sf_pkg) StdoutLine: {'line': b'        else :\n'}
[12.125913] (sf_pkg) StdoutLine: {'line': b'            ^\n'}
[12.127689] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.129439] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:71:46: E203 whitespace before ':'\n"}
[12.130990] (sf_pkg) StdoutLine: {'line': b'    def tensor_result(self, interpreter, cap) :\n'}
[12.132574] (sf_pkg) StdoutLine: {'line': b'                                             ^\n'}
[12.133826] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.135120] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:92:16: C408 Unnecessary list call - rewrite as a literal.\n'}
[12.136685] (sf_pkg) StdoutLine: {'line': b'        data = list()\n'}
[12.137911] (sf_pkg) StdoutLine: {'line': b'               ^\n'}
[12.139365] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.140984] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:94:28: E203 whitespace before ':'\n"}
[12.142308] (sf_pkg) StdoutLine: {'line': b'        for shape in shaped :\n'}
[12.143967] (sf_pkg) StdoutLine: {'line': b'                           ^\n'}
[12.145412] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.146772] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:97:20: Q000 Double quotes found but single quotes preferred\n'}
[12.148767] (sf_pkg) StdoutLine: {'line': b'        msg.data = "*".join(datastr)\n'}
[12.150466] (sf_pkg) StdoutLine: {'line': b'                   ^\n'}
[12.152104] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.153547] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:101:1: E302 expected 2 blank lines, found 1\n'}
[12.155149] (sf_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[12.156746] (sf_pkg) StdoutLine: {'line': b'^\n'}
[12.158122] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.159529] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:101:20: E203 whitespace before ':'\n"}
[12.161041] (sf_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[12.162478] (sf_pkg) StdoutLine: {'line': b'                   ^\n'}
[12.164100] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.165413] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:103:50: Q000 Double quotes found but single quotes preferred\n'}
[12.167512] (sf_pkg) StdoutLine: {'line': b'    interpreter = tf.lite.Interpreter(model_path="lite-model_movenet_singlepose_lightning_3.tflite")\n'}
[12.168949] (sf_pkg) StdoutLine: {'line': b'                                                 ^\n'}
[12.170204] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.172217] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:103:100: E501 line too long (100 > 99 characters)\n'}
[12.174090] (sf_pkg) StdoutLine: {'line': b'    interpreter = tf.lite.Interpreter(model_path="lite-model_movenet_singlepose_lightning_3.tflite")\n'}
[12.175784] (sf_pkg) StdoutLine: {'line': b'                                                                                                   ^\n'}
[12.177450] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.178985] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:117:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[12.180813] (sf_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[12.182352] (sf_pkg) StdoutLine: {'line': b'^\n'}
[12.183818] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.185237] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:117:26: E203 whitespace before ':'\n"}
[12.186561] (-) TimerEvent: {}
[12.187302] (sf_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[12.189089] (sf_pkg) StdoutLine: {'line': b'                         ^\n'}
[12.190802] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.192347] (sf_pkg) StdoutLine: {'line': b"./sf_pkg/tensor_publisher.py:120:1: E265 block comment should start with '# '\n"}
[12.194084] (sf_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8^\n'}
[12.195596] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.197399] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:120:29: W292 no newline at end of file\n'}
[12.199038] (sf_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8                            ^\n'}
[12.200863] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.202420] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:120:29: W292 no newline at end of file\n'}
[12.204155] (sf_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8                            ^\n'}
[12.205833] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.207168] (sf_pkg) StdoutLine: {'line': b'./sf_pkg/tensor_publisher.py:120:29: W292 no newline at end of file\n'}
[12.208681] (sf_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8                            ^\n'}
[12.210001] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.211289] (sf_pkg) StdoutLine: {'line': b'3     C408 Unnecessary list call - rewrite as a literal.\n'}
[12.213010] (sf_pkg) StdoutLine: {'line': b'4     C417 Unnecessary use of map - use a generator expression instead.\n'}
[12.214651] (sf_pkg) StdoutLine: {'line': b'4     CNL100 Class definition does not have a new line.\n'}
[12.227992] (sf_pkg) StdoutLine: {'line': b'61    E111 indentation is not a multiple of four\n'}
[12.229479] (sf_pkg) StdoutLine: {'line': b'9     E114 indentation is not a multiple of four (comment)\n'}
[12.230995] (sf_pkg) StdoutLine: {'line': b'2     E115 expected an indented block (comment)\n'}
[12.232511] (sf_pkg) StdoutLine: {'line': b"1     E201 whitespace after '('\n"}
[12.233910] (sf_pkg) StdoutLine: {'line': b"2     E202 whitespace before ')'\n"}
[12.235435] (sf_pkg) StdoutLine: {'line': b"24    E203 whitespace before ':'\n"}
[12.236916] (sf_pkg) StdoutLine: {'line': b'2     E225 missing whitespace around operator\n'}
[12.238380] (sf_pkg) StdoutLine: {'line': b"5     E231 missing whitespace after ','\n"}
[12.240056] (sf_pkg) StdoutLine: {'line': b'1     E251 unexpected spaces around keyword / parameter equals\n'}
[12.241757] (sf_pkg) StdoutLine: {'line': b'4     E261 at least two spaces before inline comment\n'}
[12.243304] (sf_pkg) StdoutLine: {'line': b"6     E265 block comment should start with '# '\n"}
[12.245264] (sf_pkg) StdoutLine: {'line': b'1     E272 multiple spaces before keyword\n'}
[12.256077] (sf_pkg) StdoutLine: {'line': b'15    E301 expected 1 blank line, found 0\n'}
[12.256894] (sf_pkg) StdoutLine: {'line': b'9     E302 expected 2 blank lines, found 1\n'}
[12.257554] (sf_pkg) StdoutLine: {'line': b'1     E303 too many blank lines (3)\n'}
[12.258175] (sf_pkg) StdoutLine: {'line': b'6     E305 expected 2 blank lines after class or function definition, found 0\n'}
[12.258833] (sf_pkg) StdoutLine: {'line': b'2     E402 module level import not at top of file\n'}
[12.259537] (sf_pkg) StdoutLine: {'line': b'2     E501 line too long (100 > 99 characters)\n'}
[12.260348] (sf_pkg) StdoutLine: {'line': b'1     E703 statement ends with a semicolon\n'}
[12.260940] (sf_pkg) StdoutLine: {'line': b"1     F821 undefined name 'now'\n"}
[12.261502] (sf_pkg) StdoutLine: {'line': b"1     F841 local variable 'data' is assigned to but never used\n"}
[12.262145] (sf_pkg) StdoutLine: {'line': b"10    I100 Import statements are in the wrong order. 'import os' should be before 'from setuptools import setup' and in a different group.\n"}
[12.262908] (sf_pkg) StdoutLine: {'line': b"5     I201 Missing newline between import groups. 'import os' is identified as Stdlib and 'from setuptools import setup' is identified as Third Party.\n"}
[12.263610] (sf_pkg) StdoutLine: {'line': b'15    Q000 Double quotes found but single quotes preferred\n'}
[12.264321] (sf_pkg) StdoutLine: {'line': b'1     W291 trailing whitespace\n'}
[12.264888] (sf_pkg) StdoutLine: {'line': b'11    W292 no newline at end of file\n'}
[12.265419] (sf_pkg) StdoutLine: {'line': b'3     W293 blank line contains whitespace\n'}
[12.266003] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.266634] (sf_pkg) StdoutLine: {'line': b'12 files checked\n'}
[12.267255] (sf_pkg) StdoutLine: {'line': b'212 errors\n'}
[12.280064] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.280832] (sf_pkg) StdoutLine: {'line': b"'C'-type errors: 11\n"}
[12.281483] (sf_pkg) StdoutLine: {'line': b"'E'-type errors: 154\n"}
[12.282140] (sf_pkg) StdoutLine: {'line': b"'F'-type errors: 2\n"}
[12.282865] (sf_pkg) StdoutLine: {'line': b"'I'-type errors: 15\n"}
[12.283467] (sf_pkg) StdoutLine: {'line': b"'Q'-type errors: 15\n"}
[12.284180] (sf_pkg) StdoutLine: {'line': b"'W'-type errors: 15\n"}
[12.284778] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.285485] (sf_pkg) StdoutLine: {'line': b'Checked files:\n'}
[12.286095] (sf_pkg) StdoutLine: {'line': b'\n'}
[12.286620] (-) TimerEvent: {}
[12.287199] (sf_pkg) StdoutLine: {'line': b'* ./setup.py\n'}
[12.288070] (sf_pkg) StdoutLine: {'line': b'* ./launch/sf.launch.py\n'}
[12.300122] (sf_pkg) StdoutLine: {'line': b'* ./sf_pkg/serial_talker.py\n'}
[12.300815] (sf_pkg) StdoutLine: {'line': b'* ./sf_pkg/__init__.py\n'}
[12.301427] (sf_pkg) StdoutLine: {'line': b'* ./sf_pkg/I2C_LCD_driver.py\n'}
[12.302024] (sf_pkg) StdoutLine: {'line': b'* ./sf_pkg/cmd_selector.py\n'}
[12.302644] (sf_pkg) StdoutLine: {'line': b'* ./sf_pkg/calculator.py\n'}
[12.303291] (sf_pkg) StdoutLine: {'line': b'* ./sf_pkg/tensor.py\n'}
[12.303922] (sf_pkg) StdoutLine: {'line': b'* ./sf_pkg/tensor_publisher.py\n'}
[12.304566] (sf_pkg) StdoutLine: {'line': b'* ./test/test_flake8.py\n'}
[12.305173] (sf_pkg) StdoutLine: {'line': b'* ./test/test_copyright.py\n'}
[12.305755] (sf_pkg) StdoutLine: {'line': b'* ./test/test_pep257.py\n'}
[12.306368] (sf_pkg) StdoutLine: {'line': b'-------- generated xml file: /home/pi/sunflower/build/sf_pkg/pytest.xml --------\n'}
[12.306961] (sf_pkg) StdoutLine: {'line': b'=========================== short test summary info ============================\n'}
[12.307581] (sf_pkg) StdoutLine: {'line': b'FAILED test/test_copyright.py::test_copyright - AssertionError: Found errors\n'}
[12.308369] (sf_pkg) StdoutLine: {'line': b'FAILED test/test_flake8.py::test_flake8 - AssertionError: Found 212 code styl...\n'}
[12.308995] (sf_pkg) StdoutLine: {'line': b'\x1b[31m=================== \x1b[31m\x1b[1m2 failed\x1b[0m, \x1b[32m1 passed\x1b[0m, \x1b[33m5 warnings\x1b[0m\x1b[31m in 3.80s\x1b[0m\x1b[31m ====================\x1b[0m\n'}
[12.309617] (stem_pkg) StdoutLine: {'line': b'test/test_copyright.py \x1b[31mF\x1b[0m\x1b[31m                                                 [ 33%]\x1b[0m\n'}
[12.310290] (sf_pkg) CommandEnded: {'returncode': 1}
[12.320268] (sf_pkg) TestFailure: {'identifier': 'sf_pkg'}
[12.320558] (sf_pkg) JobEnded: {'identifier': 'sf_pkg', 'rc': 0}
[12.328206] (test_pkg) StdoutLine: {'line': b'\x1b[1m============================= test session starts ==============================\x1b[0m\n'}
[12.329253] (test_pkg) StdoutLine: {'line': b'platform linux -- Python 3.8.10, pytest-7.1.2, pluggy-0.13.0\n'}
[12.330031] (test_pkg) StdoutLine: {'line': b'cachedir: /home/pi/sunflower/build/test_pkg/.pytest_cache\n'}
[12.330707] (test_pkg) StdoutLine: {'line': b'rootdir: /home/pi/sunflower/src/test_pkg\n'}
[12.331398] (test_pkg) StdoutLine: {'line': b'plugins: ament-flake8-0.9.6, ament-copyright-0.9.6, launch-testing-ros-0.11.6, ament-xmllint-0.9.6, ament-pep257-0.9.6, ament-lint-0.9.6, launch-testing-0.10.8, rerunfailures-10.2, repeat-0.9.1, colcon-core-0.8.3, cov-2.8.1\n'}
[12.386834] (-) TimerEvent: {}
[12.487674] (-) TimerEvent: {}
[12.588531] (-) TimerEvent: {}
[12.593050] (test_pkg) StdoutLine: {'line': b'\x1b[1mcollecting ... \x1b[0m\x1b[1m\n'}
[12.594306] (test_pkg) StdoutLine: {'line': b'collected 3 items                                                              \x1b[0m\n'}
[12.598202] (test_pkg) StdoutLine: {'line': b'\n'}
[12.618063] (stem_pkg) StdoutLine: {'line': b'test/test_flake8.py \x1b[31mF\x1b[0m\x1b[31m                                                    [ 66%]\x1b[0m\n'}
[12.688749] (-) TimerEvent: {}
[12.788987] (test_pkg) StdoutLine: {'line': b'test/test_copyright.py \x1b[32m.\x1b[0m\x1b[33m                                                 [ 33%]\x1b[0m\n'}
[12.789708] (-) TimerEvent: {}
[12.890525] (-) TimerEvent: {}
[12.991334] (-) TimerEvent: {}
[13.042790] (stem_pkg) StdoutLine: {'line': b'test/test_pep257.py \x1b[32m.\x1b[0m\x1b[31m                                                    [100%]\x1b[0m\n'}
[13.043913] (stem_pkg) StdoutLine: {'line': b'\n'}
[13.045054] (stem_pkg) StdoutLine: {'line': b'=================================== FAILURES ===================================\n'}
[13.045693] (stem_pkg) StdoutLine: {'line': b'\x1b[31m\x1b[1m________________________________ test_copyright ________________________________\x1b[0m\n'}
[13.046275] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mtest/test_copyright.py\x1b[0m:23: in test_copyright\n'}
[13.091566] (-) TimerEvent: {}
[13.174834] (stem_pkg) StdoutLine: {'line': b"    \x1b[34;01massert\x1b[39;49;00m rc == \x1b[34;01m0\x1b[39;49;00m, \x1b[33m'\x1b[39;49;00m\x1b[33mFound errors\x1b[39;49;00m\x1b[33m'\x1b[39;49;00m\n"}
[13.176354] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   AssertionError: Found errors\x1b[0m\n'}
[13.177654] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   assert 1 == 0\x1b[0m\n'}
[13.179024] (stem_pkg) StdoutLine: {'line': b'----------------------------- Captured stderr call -----------------------------\n'}
[13.180184] (stem_pkg) StdoutLine: {'line': b'launch/stem.launch.py: could not find copyright notice\n'}
[13.181461] (stem_pkg) StdoutLine: {'line': b'stem_pkg/I2C_LCD_driver.py: could not find copyright notice\n'}
[13.182910] (stem_pkg) StdoutLine: {'line': b'stem_pkg/async_serial_talker.py: could not find copyright notice\n'}
[13.184377] (stem_pkg) StdoutLine: {'line': b'stem_pkg/calculator.py: could not find copyright notice\n'}
[13.185751] (stem_pkg) StdoutLine: {'line': b'stem_pkg/cmd_selector.py: could not find copyright notice\n'}
[13.187058] (stem_pkg) StdoutLine: {'line': b'stem_pkg/controller.py: could not find copyright notice\n'}
[13.199917] (-) TimerEvent: {}
[13.202918] (stem_pkg) StdoutLine: {'line': b'stem_pkg/serial_talker.py: could not find copyright notice\n'}
[13.203898] (stem_pkg) StdoutLine: {'line': b'stem_pkg/tensor.py: could not find copyright notice\n'}
[13.204639] (stem_pkg) StdoutLine: {'line': b'stem_pkg/tensor_publisher.py: could not find copyright notice\n'}
[13.205319] (stem_pkg) StdoutLine: {'line': b'stem_pkg/tester.py: could not find copyright notice\n'}
[13.205939] (stem_pkg) StdoutLine: {'line': b'10 errors, checked 14 files\n'}
[13.206609] (stem_pkg) StdoutLine: {'line': b'\x1b[31m\x1b[1m_________________________________ test_flake8 __________________________________\x1b[0m\n'}
[13.207204] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mtest/test_flake8.py\x1b[0m:23: in test_flake8\n'}
[13.207818] (stem_pkg) StdoutLine: {'line': b'    \x1b[34;01massert\x1b[39;49;00m rc == \x1b[34;01m0\x1b[39;49;00m, \\\n'}
[13.208515] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   AssertionError: Found 323 code style errors / warnings:\x1b[0m\n'}
[13.209109] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./setup.py:2:1: I100 Import statements are in the wrong order. 'import os' should be before 'from setuptools import setup' and in a different group.\x1b[0m\n"}
[13.220490] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./setup.py:2:1: I201 Missing newline between import groups. 'import os' is identified as Stdlib and 'from setuptools import setup' is identified as Third Party.\x1b[0m\n"}
[13.221840] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./setup.py:3:1: I100 Import statements are in the wrong order. 'from glob import glob' should be before 'import os'\x1b[0m\n"}
[13.223234] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./setup.py:26:13: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.224488] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./setup.py:27:13: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.225825] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./setup.py:28:13: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.227124] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./setup.py:29:13: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.228732] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./setup.py:30:13: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.229965] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./setup.py:31:13: E265 block comment should start with '# '\x1b[0m\n"}
[13.231195] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./setup.py:32:13: E265 block comment should start with '# '\x1b[0m\n"}
[13.232365] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./setup.py:35:2: W292 no newline at end of file\x1b[0m\n'}
[13.233582] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/stem.launch.py:4:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[13.235808] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/stem.launch.py:10:20: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.253091] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/stem.launch.py:20:32: E202 whitespace before ')'\x1b[0m\n"}
[13.254466] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/stem.launch.py:26:20: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.255798] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./launch/stem.launch.py:26:29: E202 whitespace before ')'\x1b[0m\n"}
[13.256782] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./launch/stem.launch.py:27:7: W292 no newline at end of file\x1b[0m\n'}
[13.257740] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/serial_talker.py:5:1: I100 Import statements are in the wrong order. 'import serial' should be before 'from std_msgs.msg import String'\x1b[0m\n"}
[13.258721] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/serial_talker.py:5:14: W291 trailing whitespace\x1b[0m\n'}
[13.260008] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/serial_talker.py:11:5: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.268422] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/serial_talker.py:19:32: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.269581] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/serial_talker.py:22:9: E265 block comment should start with '# '\x1b[0m\n"}
[13.270752] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/serial_talker.py:23:9: E265 block comment should start with '# '\x1b[0m\n"}
[13.271926] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/serial_talker.py:40:1: E305 expected 2 blank lines after class or function definition, found 1\x1b[0m\n'}
[13.273048] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/serial_talker.py:40:26: E203 whitespace before ':'\x1b[0m\n"}
[13.274258] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/serial_talker.py:41:11: W292 no newline at end of file\x1b[0m\n'}
[13.275379] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:5:1: E402 module level import not at top of file\x1b[0m\n'}
[13.278590] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:6:1: E402 module level import not at top of file\x1b[0m\n'}
[13.280876] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:6:1: I100 Import statements are in the wrong order. 'from time import sleep' should be before 'import smbus' and in a different group.\x1b[0m\n"}
[13.291957] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:6:1: I201 Missing newline between import groups. 'from time import sleep' is identified as Stdlib and 'import smbus' is identified as Third Party.\x1b[0m\n"}
[13.292861] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:7:1: E302 expected 2 blank lines, found 0\x1b[0m\n'}
[13.293668] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:8:1: CNL100 Class definition does not have a new line.\x1b[0m\n'}
[13.295365] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:8:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.296093] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:9:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.296709] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:10:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.297246] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:12:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.297832] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:12:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.298310] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:13:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.298820] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:14:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.301235] (-) TimerEvent: {}
[13.301815] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:16:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.302586] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:16:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.303519] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:17:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.304565] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:18:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.305198] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:20:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.305756] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:20:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.306330] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:21:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.306832] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:22:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.307352] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:24:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.307931] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:24:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.308553] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:25:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.309085] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:27:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.320370] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:27:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.321354] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:28:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.322032] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:30:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.323469] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:30:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.324436] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:31:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.326756] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:33:1: E305 expected 2 blank lines after class or function definition, found 0\x1b[0m\n'}
[13.328384] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:68:16: E261 at least two spaces before inline comment\x1b[0m\n'}
[13.330058] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:69:16: E261 at least two spaces before inline comment\x1b[0m\n'}
[13.330985] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:70:16: E261 at least two spaces before inline comment\x1b[0m\n'}
[13.342068] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:71:1: E302 expected 2 blank lines, found 0\x1b[0m\n'}
[13.342950] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:72:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[13.343671] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:72:4: E265 block comment should start with '# '\x1b[0m\n"}
[13.345372] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:73:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.346139] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:74:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.346841] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:75:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.347526] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:76:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.348299] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:77:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.349018] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:78:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.349735] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:79:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.350463] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:80:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.351256] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:81:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.363253] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:82:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.364215] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:83:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.364900] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:84:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[13.365611] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:85:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.366304] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:85:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.367075] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:86:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.367854] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:87:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.368619] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:88:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.369353] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:89:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.370048] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:90:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.370713] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:90:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.371414] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:91:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.388450] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:92:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.389226] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:93:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[13.389979] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:94:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.390773] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:94:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.391916] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:95:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.392772] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:96:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.393568] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:97:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[13.394319] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:98:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[13.395139] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:99:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.396002] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:99:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.396776] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:100:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.397697] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:101:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.398447] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:102:1: W293 blank line contains whitespace\x1b[0m\n'}
[13.399228] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:103:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[13.400309] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:104:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.401403] (-) TimerEvent: {}
[13.432842] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:106:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.434129] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:108:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.436548] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:110:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.437597] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:112:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.439125] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:115:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.441304] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:116:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[13.442853] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:117:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.444321] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:117:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.446859] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:118:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.448490] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:119:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.449922] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:120:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[13.451313] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:121:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.452776] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:121:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.454201] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:121:31: E261 at least two spaces before inline comment\x1b[0m\n'}
[13.455376] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:122:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.456685] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:123:10: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.493783] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:124:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.501077] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:125:10: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.504336] (-) TimerEvent: {}
[13.505894] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:126:4: E114 indentation is not a multiple of four (comment)\x1b[0m\n'}
[13.516637] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:127:4: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.518884] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:127:4: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.520745] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:128:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.522582] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:128:27: E703 statement ends with a semicolon\x1b[0m\n'}
[13.524405] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:129:7: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.526726] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:130:10: E111 indentation is not a multiple of four\x1b[0m\n'}
[13.528758] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/I2C_LCD_driver.py:131:41: W292 no newline at end of file\x1b[0m\n'}
[13.541131] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:5:1: I100 Import statements are in the wrong order. 'import RPi.GPIO' should be before 'from std_msgs.msg import String'\x1b[0m\n"}
[13.543812] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:7:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[13.546015] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:7:23: E203 whitespace before ':'\x1b[0m\n"}
[13.548545] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:8:1: CNL100 Class definition does not have a new line.\x1b[0m\n'}
[13.550220] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:15:1: W293 blank line contains whitespace\x1b[0m\n'}
[13.552899] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:19:60: E261 at least two spaces before inline comment\x1b[0m\n'}
[13.554961] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:19:61: E262 inline comment should start with '# '\x1b[0m\n"}
[13.557294] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:20:60: E261 at least two spaces before inline comment\x1b[0m\n'}
[13.569501] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:20:61: E262 inline comment should start with '# '\x1b[0m\n"}
[13.571407] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:22:60: E261 at least two spaces before inline comment\x1b[0m\n'}
[13.573554] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:22:61: E262 inline comment should start with '# '\x1b[0m\n"}
[13.575461] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:23:60: E261 at least two spaces before inline comment\x1b[0m\n'}
[13.577716] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:23:61: E262 inline comment should start with '# '\x1b[0m\n"}
[13.579863] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:25:60: E261 at least two spaces before inline comment\x1b[0m\n'}
[13.582122] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:25:61: E262 inline comment should start with '# '\x1b[0m\n"}
[13.584160] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:26:60: E261 at least two spaces before inline comment\x1b[0m\n'}
[13.592901] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:26:61: E262 inline comment should start with '# '\x1b[0m\n"}
[13.594855] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:28:60: E261 at least two spaces before inline comment\x1b[0m\n'}
[13.596589] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:28:61: E262 inline comment should start with '# '\x1b[0m\n"}
[13.598395] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:30:9: E265 block comment should start with '# '\x1b[0m\n"}
[13.600054] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:31:9: E265 block comment should start with '# '\x1b[0m\n"}
[13.604400] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:33:57: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.607856] (-) TimerEvent: {}
[13.612988] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:33:59: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.616414] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:34:57: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.626780] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:34:59: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.630475] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:36:57: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.633624] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:36:59: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.640171] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:37:57: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.644089] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:37:59: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.654750] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:39:57: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.659600] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:39:59: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.661641] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:40:57: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.663380] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:40:59: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.665234] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:42:57: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.666743] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:42:59: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.668443] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:46:9: E265 block comment should start with '# '\x1b[0m\n"}
[13.670323] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:48:43: E203 whitespace before ':'\x1b[0m\n"}
[13.672476] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:55:32: E203 whitespace before ':'\x1b[0m\n"}
[13.675563] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:60:19: E203 whitespace before ':'\x1b[0m\n"}
[13.678455] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:61:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.681033] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:62:21: E203 whitespace before ':'\x1b[0m\n"}
[13.683572] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:63:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.687396] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:64:21: E203 whitespace before ':'\x1b[0m\n"}
[13.690642] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:65:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.694127] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:66:21: E203 whitespace before ':'\x1b[0m\n"}
[13.697374] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:67:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.700748] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:68:21: E203 whitespace before ':'\x1b[0m\n"}
[13.703831] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:69:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.706163] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:70:21: E203 whitespace before ':'\x1b[0m\n"}
[13.708508] (-) TimerEvent: {}
[13.709442] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:71:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.712812] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:72:21: E203 whitespace before ':'\x1b[0m\n"}
[13.715518] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:73:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.718858] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:74:21: E203 whitespace before ':'\x1b[0m\n"}
[13.722393] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:75:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.725918] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:76:21: E203 whitespace before ':'\x1b[0m\n"}
[13.729170] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:77:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.732261] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:78:13: E203 whitespace before ':'\x1b[0m\n"}
[13.734733] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:83:20: E203 whitespace before ':'\x1b[0m\n"}
[13.737101] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:95:1: E305 expected 2 blank lines after class or function definition, found 1\x1b[0m\n'}
[13.739636] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:95:26: E203 whitespace before ':'\x1b[0m\n"}
[13.759767] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/controller.py:96:11: W292 no newline at end of file\x1b[0m\n'}
[13.762329] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/async_serial_talker.py:5:1: I100 Import statements are in the wrong order. 'import asyncio' should be before 'from std_msgs.msg import String' and in a different group.\x1b[0m\n"}
[13.764891] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/async_serial_talker.py:5:1: I201 Missing newline between import groups. 'import asyncio' is identified as Stdlib and 'from std_msgs.msg import String' is identified as Third Party.\x1b[0m\n"}
[13.768057] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/async_serial_talker.py:6:1: I201 Missing newline between import groups. 'import serial_asyncio' is identified as Third Party and 'import asyncio' is identified as Stdlib.\x1b[0m\n"}
[13.770423] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/async_serial_talker.py:11:5: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.772630] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/async_serial_talker.py:20:32: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.774530] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/async_serial_talker.py:29:100: E501 line too long (102 > 99 characters)\x1b[0m\n'}
[13.776950] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/async_serial_talker.py:38:38: E203 whitespace before ':'\x1b[0m\n"}
[13.779347] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/async_serial_talker.py:39:21: E203 whitespace before ':'\x1b[0m\n"}
[13.782060] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/async_serial_talker.py:42:9: E265 block comment should start with '# '\x1b[0m\n"}
[13.784891] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/async_serial_talker.py:57:1: E305 expected 2 blank lines after class or function definition, found 1\x1b[0m\n'}
[13.788009] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/async_serial_talker.py:57:26: E203 whitespace before ':'\x1b[0m\n"}
[13.789680] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/async_serial_talker.py:58:11: W292 no newline at end of file\x1b[0m\n'}
[13.791469] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/cmd_selector.py:6:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[13.793112] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/cmd_selector.py:8:5: E301 expected 1 blank line, found 0\x1b[0m\n'}
[13.794534] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/cmd_selector.py:44:1: E303 too many blank lines (3)\x1b[0m\n'}
[13.796050] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/cmd_selector.py:55:1: E305 expected 2 blank lines after class or function definition, found 1\x1b[0m\n'}
[13.797785] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/cmd_selector.py:55:26: E203 whitespace before ':'\x1b[0m\n"}
[13.799371] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/cmd_selector.py:56:11: W292 no newline at end of file\x1b[0m\n'}
[13.801981] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:1:1: F401 'socket.NI_NUMERICHOST' imported but unused\x1b[0m\n"}
[13.805360] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:2:1: I201 Missing newline between import groups. 'import rclpy' is identified as Third Party and 'from socket import NI_NUMERICHOST' is identified as Stdlib.\x1b[0m\n"}
[13.808847] (-) TimerEvent: {}
[13.809789] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:7:1: I100 Import statements are in the wrong order. 'import math' should be before 'from sunflower_interfaces.msg import TfliteResult' and in a different group.\x1b[0m\n"}
[13.811595] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:7:1: I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from sunflower_interfaces.msg import TfliteResult' is identified as Third Party.\x1b[0m\n"}
[13.813506] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:9:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[13.815558] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:9:23: E203 whitespace before ':'\x1b[0m\n"}
[13.818998] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:10:1: CNL100 Class definition does not have a new line.\x1b[0m\n'}
[13.823046] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:23:35: E203 whitespace before ':'\x1b[0m\n"}
[13.826708] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:31:30: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.829381] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:34:27: C417 Unnecessary use of map - use a generator expression instead.\x1b[0m\n'}
[13.831844] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:35:27: C417 Unnecessary use of map - use a generator expression instead.\x1b[0m\n'}
[13.834413] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:36:27: C417 Unnecessary use of map - use a generator expression instead.\x1b[0m\n'}
[13.836809] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:62:1: W293 blank line contains whitespace\x1b[0m\n'}
[13.838785] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:65:10: E203 whitespace before ','\x1b[0m\n"}
[13.841398] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:65:39: C417 Unnecessary use of map - use a generator expression instead.\x1b[0m\n'}
[13.844521] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:83:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[13.847963] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:83:20: E203 whitespace before ':'\x1b[0m\n"}
[13.851372] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:94:1: E305 expected 2 blank lines after class or function definition, found 1\x1b[0m\n'}
[13.853762] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:94:26: E203 whitespace before ':'\x1b[0m\n"}
[13.855953] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/calculator.py:95:11: W292 no newline at end of file\x1b[0m\n'}
[13.857793] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:5:1: I100 Import statements are in the wrong order. 'import cv2' should be before 'from sunflower_interfaces.msg import TfliteResult'\x1b[0m\n"}
[13.865570] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:7:1: I100 Import statements are in the wrong order. 'import numpy' should be before 'import tensorflow'\x1b[0m\n"}
[13.867365] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:9:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[13.869118] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:9:19: E203 whitespace before ':'\x1b[0m\n"}
[13.870265] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:10:1: CNL100 Class definition does not have a new line.\x1b[0m\n'}
[13.871247] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:20:46: E203 whitespace before ':'\x1b[0m\n"}
[13.872504] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:41:9: F841 local variable 'data' is assigned to but never used\x1b[0m\n"}
[13.877270] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:41:16: C408 Unnecessary list call - rewrite as a literal.\x1b[0m\n'}
[13.879087] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:53:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[13.880672] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:53:20: E203 whitespace before ':'\x1b[0m\n"}
[13.883189] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:55:50: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.885285] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:55:100: E501 line too long (100 > 99 characters)\x1b[0m\n'}
[13.887040] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:67:1: E305 expected 2 blank lines after class or function definition, found 1\x1b[0m\n'}
[13.889955] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:67:26: E203 whitespace before ':'\x1b[0m\n"}
[13.893095] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:70:1: E265 block comment should start with '# '\x1b[0m\n"}
[13.896573] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:70:29: W292 no newline at end of file\x1b[0m\n'}
[13.899631] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:70:29: W292 no newline at end of file\x1b[0m\n'}
[13.901665] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor.py:70:29: W292 no newline at end of file\x1b[0m\n'}
[13.903443] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:5:1: I100 Import statements are in the wrong order. 'from pynput import keyboard' should be before 'from std_msgs.msg import String'\x1b[0m\n"}
[13.904538] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:7:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[13.905438] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:7:19: E203 whitespace before ':'\x1b[0m\n"}
[13.906224] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:8:1: CNL100 Class definition does not have a new line.\x1b[0m\n'}
[13.907686] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:16:21: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.909317] (-) TimerEvent: {}
[13.910396] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:16:23: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.913354] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:17:23: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.916035] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:17:25: E251 unexpected spaces around keyword / parameter equals\x1b[0m\n'}
[13.930431] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:21:43: E203 whitespace before ':'\x1b[0m\n"}
[13.934293] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:29:1: B901 blind except: statement\x1b[0m\n'}
[13.937511] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:29:9: E722 do not use bare 'except'\x1b[0m\n"}
[13.940476] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:32:32: E203 whitespace before ':'\x1b[0m\n"}
[13.943687] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:37:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.960191] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:37:20: E203 whitespace before ':'\x1b[0m\n"}
[13.964307] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:38:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.969346] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:39:19: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.973052] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:39:22: E203 whitespace before ':'\x1b[0m\n"}
[13.975969] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:40:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.980624] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:41:19: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[13.985626] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:41:22: E203 whitespace before ':'\x1b[0m\n"}
[13.997165] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:42:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.001215] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:43:19: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.016155] (-) TimerEvent: {}
[14.018081] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:43:22: E203 whitespace before ':'\x1b[0m\n"}
[14.021612] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:44:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.024726] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:45:19: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.028470] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:45:22: E203 whitespace before ':'\x1b[0m\n"}
[14.032433] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:46:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.047115] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:47:19: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.051125] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:47:22: E203 whitespace before ':'\x1b[0m\n"}
[14.055224] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:48:17: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.059055] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:49:13: E203 whitespace before ':'\x1b[0m\n"}
[14.073314] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:57:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[14.076951] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:57:20: E203 whitespace before ':'\x1b[0m\n"}
[14.078956] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:68:1: E305 expected 2 blank lines after class or function definition, found 1\x1b[0m\n'}
[14.081194] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:68:26: E203 whitespace before ':'\x1b[0m\n"}
[14.083350] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tester.py:69:11: W292 no newline at end of file\x1b[0m\n'}
[14.085345] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:5:1: I100 Import statements are in the wrong order. 'import cv2' should be before 'from std_msgs.msg import String'\x1b[0m\n"}
[14.092591] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:7:1: I100 Import statements are in the wrong order. 'import numpy' should be before 'import tensorflow'\x1b[0m\n"}
[14.093916] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:8:1: I100 Import statements are in the wrong order. 'import time' should be before 'import numpy' and in a different group.\x1b[0m\n"}
[14.106917] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:8:1: I201 Missing newline between import groups. 'import time' is identified as Stdlib and 'import numpy' is identified as Third Party.\x1b[0m\n"}
[14.108089] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:9:1: I201 Missing newline between import groups. 'import I2C_LCD_driver' is identified as Third Party and 'import time' is identified as Stdlib.\x1b[0m\n"}
[14.109308] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:12:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[14.110363] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:12:28: E203 whitespace before ':'\x1b[0m\n"}
[14.111466] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:13:1: CNL100 Class definition does not have a new line.\x1b[0m\n'}
[14.122368] (-) TimerEvent: {}
[14.140225] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:17:34: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.160354] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:17:36: E231 missing whitespace after ','\x1b[0m\n"}
[14.161522] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:23:16: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.163180] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:23:19: E225 missing whitespace around operator\x1b[0m\n'}
[14.164815] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:23:80: E225 missing whitespace around operator\x1b[0m\n'}
[14.166464] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:23:80: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.174798] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:25:34: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.176088] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:25:36: E231 missing whitespace after ','\x1b[0m\n"}
[14.177551] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:26:34: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.178624] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:26:43: E231 missing whitespace after ','\x1b[0m\n"}
[14.179877] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:31:50: E203 whitespace before ':'\x1b[0m\n"}
[14.180565] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:35:16: F821 undefined name 'now'\x1b[0m\n"}
[14.181181] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:35:44: E203 whitespace before ':'\x1b[0m\n"}
[14.181958] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:38:38: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.182837] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:38:40: E231 missing whitespace after ','\x1b[0m\n"}
[14.190285] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:39:61: E231 missing whitespace after ','\x1b[0m\n"}
[14.191647] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:56:20: C408 Unnecessary list call - rewrite as a literal.\x1b[0m\n'}
[14.193021] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:58:32: E203 whitespace before ':'\x1b[0m\n"}
[14.193870] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:60:44: C417 Unnecessary use of map - use a generator expression instead.\x1b[0m\n'}
[14.195184] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:60:56: E203 whitespace before ':'\x1b[0m\n"}
[14.196432] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:62:13: E115 expected an indented block (comment)\x1b[0m\n'}
[14.197390] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:66:13: E203 whitespace before ':'\x1b[0m\n"}
[14.198307] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:69:46: E203 whitespace before ':'\x1b[0m\n"}
[14.206715] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:90:16: C408 Unnecessary list call - rewrite as a literal.\x1b[0m\n'}
[14.208395] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:92:28: E203 whitespace before ':'\x1b[0m\n"}
[14.209862] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:95:20: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.211436] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:96:20: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.213134] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:100:1: E302 expected 2 blank lines, found 1\x1b[0m\n'}
[14.214476] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:100:20: E203 whitespace before ':'\x1b[0m\n"}
[14.215651] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:102:50: Q000 Double quotes found but single quotes preferred\x1b[0m\n'}
[14.217530] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:102:100: E501 line too long (100 > 99 characters)\x1b[0m\n'}
[14.218530] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:116:1: E305 expected 2 blank lines after class or function definition, found 1\x1b[0m\n'}
[14.219676] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:116:26: E203 whitespace before ':'\x1b[0m\n"}
[14.220612] (stem_pkg) StdoutLine: {'line': b"\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:119:1: E265 block comment should start with '# '\x1b[0m\n"}
[14.221633] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:119:29: W292 no newline at end of file\x1b[0m\n'}
[14.222401] (-) TimerEvent: {}
[14.237663] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:119:29: W292 no newline at end of file\x1b[0m\n'}
[14.243749] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE     ./stem_pkg/tensor_publisher.py:119:29: W292 no newline at end of file\x1b[0m\n'}
[14.245971] (stem_pkg) StdoutLine: {'line': b'\x1b[1m\x1b[31mE   assert 1 == 0\x1b[0m\n'}
[14.246944] (stem_pkg) StdoutLine: {'line': b'----------------------------- Captured stdout call -----------------------------\n'}
[14.248054] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.249137] (stem_pkg) StdoutLine: {'line': b"./setup.py:2:1: I100 Import statements are in the wrong order. 'import os' should be before 'from setuptools import setup' and in a different group.\n"}
[14.250055] (stem_pkg) StdoutLine: {'line': b'import os\n'}
[14.251063] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.252068] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.252987] (stem_pkg) StdoutLine: {'line': b"./setup.py:2:1: I201 Missing newline between import groups. 'import os' is identified as Stdlib and 'from setuptools import setup' is identified as Third Party.\n"}
[14.253912] (stem_pkg) StdoutLine: {'line': b'import os\n'}
[14.254839] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.260187] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.261458] (stem_pkg) StdoutLine: {'line': b"./setup.py:3:1: I100 Import statements are in the wrong order. 'from glob import glob' should be before 'import os'\n"}
[14.262965] (stem_pkg) StdoutLine: {'line': b'from glob import glob\n'}
[14.264366] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.265692] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.266972] (stem_pkg) StdoutLine: {'line': b'./setup.py:26:13: Q000 Double quotes found but single quotes preferred\n'}
[14.270883] (stem_pkg) StdoutLine: {'line': b'            "serial_talker=stem_pkg.serial_talker:main",\n'}
[14.272821] (stem_pkg) StdoutLine: {'line': b'            ^\n'}
[14.274322] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.276020] (stem_pkg) StdoutLine: {'line': b'./setup.py:27:13: Q000 Double quotes found but single quotes preferred\n'}
[14.277086] (stem_pkg) StdoutLine: {'line': b'            "cmd_selector=stem_pkg.cmd_selector:main",\n'}
[14.278768] (stem_pkg) StdoutLine: {'line': b'            ^\n'}
[14.280715] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.282482] (stem_pkg) StdoutLine: {'line': b'./setup.py:28:13: Q000 Double quotes found but single quotes preferred\n'}
[14.284268] (stem_pkg) StdoutLine: {'line': b'            "calculator=stem_pkg.calculator:main",\n'}
[14.285971] (stem_pkg) StdoutLine: {'line': b'            ^\n'}
[14.287402] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.293849] (stem_pkg) StdoutLine: {'line': b'./setup.py:29:13: Q000 Double quotes found but single quotes preferred\n'}
[14.295031] (stem_pkg) StdoutLine: {'line': b'            "tensor_publisher=stem_pkg.tensor_publisher:main",\n'}
[14.296288] (stem_pkg) StdoutLine: {'line': b'            ^\n'}
[14.297738] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.299085] (stem_pkg) StdoutLine: {'line': b'./setup.py:30:13: Q000 Double quotes found but single quotes preferred\n'}
[14.300431] (stem_pkg) StdoutLine: {'line': b'            "tensor=stem_pkg.tensor:main"\n'}
[14.301624] (stem_pkg) StdoutLine: {'line': b'            ^\n'}
[14.302936] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.306405] (stem_pkg) StdoutLine: {'line': b"./setup.py:31:13: E265 block comment should start with '# '\n"}
[14.307605] (stem_pkg) StdoutLine: {'line': b'            #"tester=stem_pkg.tester:main",\n'}
[14.308953] (stem_pkg) StdoutLine: {'line': b'            ^\n'}
[14.310301] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.311394] (stem_pkg) StdoutLine: {'line': b"./setup.py:32:13: E265 block comment should start with '# '\n"}
[14.312898] (stem_pkg) StdoutLine: {'line': b'            #"controller=stem_pkg.controller:main"\n'}
[14.314290] (stem_pkg) StdoutLine: {'line': b'            ^\n'}
[14.315904] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.317287] (stem_pkg) StdoutLine: {'line': b'./setup.py:35:2: W292 no newline at end of file\n'}
[14.318537] (stem_pkg) StdoutLine: {'line': b') ^\n'}
[14.325483] (-) TimerEvent: {}
[14.341124] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.345240] (stem_pkg) StdoutLine: {'line': b'./launch/stem.launch.py:4:1: E302 expected 2 blank lines, found 1\n'}
[14.350906] (stem_pkg) StdoutLine: {'line': b'def generate_launch_description():\n'}
[14.351974] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.352911] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.353881] (stem_pkg) StdoutLine: {'line': b'./launch/stem.launch.py:10:20: E251 unexpected spaces around keyword / parameter equals\n'}
[14.354850] (stem_pkg) StdoutLine: {'line': b"            output= 'screen'),\n"}
[14.356736] (stem_pkg) StdoutLine: {'line': b'                   ^\n'}
[14.358134] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.373274] (stem_pkg) StdoutLine: {'line': b"./launch/stem.launch.py:20:32: E202 whitespace before ')'\n"}
[14.374316] (stem_pkg) StdoutLine: {'line': b"            name='cmd_selector' ),\n"}
[14.375478] (stem_pkg) StdoutLine: {'line': b'                               ^\n'}
[14.376859] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.378287] (stem_pkg) StdoutLine: {'line': b'./launch/stem.launch.py:26:20: E251 unexpected spaces around keyword / parameter equals\n'}
[14.379346] (stem_pkg) StdoutLine: {'line': b"            output= 'screen' )\n"}
[14.384058] (stem_pkg) StdoutLine: {'line': b'                   ^\n'}
[14.385391] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.389004] (stem_pkg) StdoutLine: {'line': b"./launch/stem.launch.py:26:29: E202 whitespace before ')'\n"}
[14.390270] (stem_pkg) StdoutLine: {'line': b"            output= 'screen' )\n"}
[14.391337] (stem_pkg) StdoutLine: {'line': b'                            ^\n'}
[14.392468] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.393502] (stem_pkg) StdoutLine: {'line': b'./launch/stem.launch.py:27:7: W292 no newline at end of file\n'}
[14.394459] (stem_pkg) StdoutLine: {'line': b'    ])      ^\n'}
[14.395451] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.396694] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/serial_talker.py:5:1: I100 Import statements are in the wrong order. 'import serial' should be before 'from std_msgs.msg import String'\n"}
[14.397789] (stem_pkg) StdoutLine: {'line': b'import serial \n'}
[14.398988] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.400341] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.402031] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/serial_talker.py:5:14: W291 trailing whitespace\n'}
[14.403461] (stem_pkg) StdoutLine: {'line': b'import serial \n'}
[14.404643] (stem_pkg) StdoutLine: {'line': b'             ^\n'}
[14.405660] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.406531] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/serial_talker.py:11:5: E301 expected 1 blank line, found 0\n'}
[14.407563] (stem_pkg) StdoutLine: {'line': b'    def __init__(self):\n'}
[14.408538] (stem_pkg) StdoutLine: {'line': b'    ^\n'}
[14.409408] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.410361] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/serial_talker.py:19:32: Q000 Double quotes found but single quotes preferred\n'}
[14.411392] (stem_pkg) StdoutLine: {'line': b'        self.get_logger().info("Serial connection started")\n'}
[14.412490] (stem_pkg) StdoutLine: {'line': b'                               ^\n'}
[14.413427] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.414800] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/serial_talker.py:22:9: E265 block comment should start with '# '\n"}
[14.416954] (stem_pkg) StdoutLine: {'line': b'        #self.ser.write("^1*2*3*4*5*6*7*8*8".encode())\n'}
[14.418844] (stem_pkg) StdoutLine: {'line': b'        ^\n'}
[14.421752] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.422454] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/serial_talker.py:23:9: E265 block comment should start with '# '\n"}
[14.423174] (stem_pkg) StdoutLine: {'line': b"        #self.get_logger().info('Transmitted')\n"}
[14.423945] (stem_pkg) StdoutLine: {'line': b'        ^\n'}
[14.424616] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.425201] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/serial_talker.py:40:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[14.425795] (-) TimerEvent: {}
[14.428043] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[14.430123] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.431205] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.431922] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/serial_talker.py:40:26: E203 whitespace before ':'\n"}
[14.432594] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[14.433248] (stem_pkg) StdoutLine: {'line': b'                         ^\n'}
[14.433936] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.434635] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/serial_talker.py:41:11: W292 no newline at end of file\n'}
[14.435292] (stem_pkg) StdoutLine: {'line': b'    main()          ^\n'}
[14.436089] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.436793] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:5:1: E402 module level import not at top of file\n'}
[14.437409] (stem_pkg) StdoutLine: {'line': b'import smbus\n'}
[14.438073] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.438704] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.439330] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:6:1: E402 module level import not at top of file\n'}
[14.440019] (stem_pkg) StdoutLine: {'line': b'from time import sleep\n'}
[14.440656] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.441257] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.441969] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/I2C_LCD_driver.py:6:1: I100 Import statements are in the wrong order. 'from time import sleep' should be before 'import smbus' and in a different group.\n"}
[14.442601] (stem_pkg) StdoutLine: {'line': b'from time import sleep\n'}
[14.443324] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.444047] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.444719] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/I2C_LCD_driver.py:6:1: I201 Missing newline between import groups. 'from time import sleep' is identified as Stdlib and 'import smbus' is identified as Third Party.\n"}
[14.445510] (stem_pkg) StdoutLine: {'line': b'from time import sleep\n'}
[14.446195] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.446986] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.447653] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:7:1: E302 expected 2 blank lines, found 0\n'}
[14.448449] (stem_pkg) StdoutLine: {'line': b'class i2c_device:\n'}
[14.449130] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.449799] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.450448] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:8:1: CNL100 Class definition does not have a new line.\n'}
[14.451064] (stem_pkg) StdoutLine: {'line': b'   def __init__(self, addr, port=I2CBUS):\n'}
[14.451769] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.452447] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.453063] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:8:4: E111 indentation is not a multiple of four\n'}
[14.453721] (stem_pkg) StdoutLine: {'line': b'   def __init__(self, addr, port=I2CBUS):\n'}
[14.454343] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.455033] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.455680] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:9:7: E111 indentation is not a multiple of four\n'}
[14.456602] (stem_pkg) StdoutLine: {'line': b'      self.addr = addr\n'}
[14.457274] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.457867] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.458424] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:10:7: E111 indentation is not a multiple of four\n'}
[14.459062] (stem_pkg) StdoutLine: {'line': b'      self.bus = smbus.SMBus(port)\n'}
[14.459663] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.460342] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.460979] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:12:4: E301 expected 1 blank line, found 0\n'}
[14.461640] (stem_pkg) StdoutLine: {'line': b'   def write_cmd(self, cmd):\n'}
[14.462229] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.462864] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.463590] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:12:4: E111 indentation is not a multiple of four\n'}
[14.464321] (stem_pkg) StdoutLine: {'line': b'   def write_cmd(self, cmd):\n'}
[14.464997] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.465621] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.466348] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:13:7: E111 indentation is not a multiple of four\n'}
[14.466959] (stem_pkg) StdoutLine: {'line': b'      self.bus.write_byte(self.addr, cmd)\n'}
[14.467594] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.468273] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.468876] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:14:7: E111 indentation is not a multiple of four\n'}
[14.469504] (stem_pkg) StdoutLine: {'line': b'      sleep(0.0001)\n'}
[14.470069] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.470644] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.471244] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:16:4: E301 expected 1 blank line, found 0\n'}
[14.471792] (stem_pkg) StdoutLine: {'line': b'   def write_cmd_arg(self, cmd, data):\n'}
[14.472410] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.472982] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.473519] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:16:4: E111 indentation is not a multiple of four\n'}
[14.474089] (stem_pkg) StdoutLine: {'line': b'   def write_cmd_arg(self, cmd, data):\n'}
[14.474656] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.475217] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.475862] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:17:7: E111 indentation is not a multiple of four\n'}
[14.476475] (stem_pkg) StdoutLine: {'line': b'      self.bus.write_byte_data(self.addr, cmd, data)\n'}
[14.477013] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.477545] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.478109] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:18:7: E111 indentation is not a multiple of four\n'}
[14.478755] (stem_pkg) StdoutLine: {'line': b'      sleep(0.0001)\n'}
[14.479318] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.479904] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.480516] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:20:4: E301 expected 1 blank line, found 0\n'}
[14.481125] (stem_pkg) StdoutLine: {'line': b'   def write_block_data(self, cmd, data):\n'}
[14.481692] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.482255] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.482831] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:20:4: E111 indentation is not a multiple of four\n'}
[14.483467] (stem_pkg) StdoutLine: {'line': b'   def write_block_data(self, cmd, data):\n'}
[14.484166] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.484720] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.485276] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:21:7: E111 indentation is not a multiple of four\n'}
[14.485873] (stem_pkg) StdoutLine: {'line': b'      self.bus.write_block_data(self.addr, cmd, data)\n'}
[14.486436] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.487008] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.487548] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:22:7: E111 indentation is not a multiple of four\n'}
[14.488129] (stem_pkg) StdoutLine: {'line': b'      sleep(0.0001)\n'}
[14.488711] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.489239] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.489790] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:24:4: E301 expected 1 blank line, found 0\n'}
[14.490394] (stem_pkg) StdoutLine: {'line': b'   def read(self):\n'}
[14.491004] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.491576] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.492289] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:24:4: E111 indentation is not a multiple of four\n'}
[14.492976] (stem_pkg) StdoutLine: {'line': b'   def read(self):\n'}
[14.493708] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.494354] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.495055] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:25:7: E111 indentation is not a multiple of four\n'}
[14.495690] (stem_pkg) StdoutLine: {'line': b'      return self.bus.read_byte(self.addr)\n'}
[14.496339] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.496873] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.497444] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:27:4: E301 expected 1 blank line, found 0\n'}
[14.498006] (stem_pkg) StdoutLine: {'line': b'   def read_data(self, cmd):\n'}
[14.498551] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.499084] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.499619] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:27:4: E111 indentation is not a multiple of four\n'}
[14.500231] (stem_pkg) StdoutLine: {'line': b'   def read_data(self, cmd):\n'}
[14.500734] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.501132] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.501540] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:28:7: E111 indentation is not a multiple of four\n'}
[14.502008] (stem_pkg) StdoutLine: {'line': b'      return self.bus.read_byte_data(self.addr, cmd)\n'}
[14.502469] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.502919] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.503351] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:30:4: E301 expected 1 blank line, found 0\n'}
[14.503811] (stem_pkg) StdoutLine: {'line': b'   def read_block_data(self, cmd):\n'}
[14.504408] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.504993] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.505705] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:30:4: E111 indentation is not a multiple of four\n'}
[14.506331] (stem_pkg) StdoutLine: {'line': b'   def read_block_data(self, cmd):\n'}
[14.506956] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.507524] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.508149] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:31:7: E111 indentation is not a multiple of four\n'}
[14.508806] (stem_pkg) StdoutLine: {'line': b'      return self.bus.read_block_data(self.addr, cmd)\n'}
[14.509483] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.510157] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.510739] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:33:1: E305 expected 2 blank lines after class or function definition, found 0\n'}
[14.511341] (stem_pkg) StdoutLine: {'line': b'LCD_CLEARDISPLAY = 0x01\n'}
[14.512022] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.512638] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.513264] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:68:16: E261 at least two spaces before inline comment\n'}
[14.513846] (stem_pkg) StdoutLine: {'line': b'En = 0b00000100 # Enable bit\n'}
[14.514406] (stem_pkg) StdoutLine: {'line': b'               ^\n'}
[14.515024] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.515615] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:69:16: E261 at least two spaces before inline comment\n'}
[14.516255] (stem_pkg) StdoutLine: {'line': b'Rw = 0b00000010 # Read/Write bit\n'}
[14.516852] (stem_pkg) StdoutLine: {'line': b'               ^\n'}
[14.517489] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.518175] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:70:16: E261 at least two spaces before inline comment\n'}
[14.518713] (stem_pkg) StdoutLine: {'line': b'Rs = 0b00000001 # Register select bit\n'}
[14.519222] (stem_pkg) StdoutLine: {'line': b'               ^\n'}
[14.519881] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.520555] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:71:1: E302 expected 2 blank lines, found 0\n'}
[14.521200] (stem_pkg) StdoutLine: {'line': b'class lcd:\n'}
[14.521675] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.522276] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.522837] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:72:4: E114 indentation is not a multiple of four (comment)\n'}
[14.523395] (stem_pkg) StdoutLine: {'line': b'   #initializes objects and lcd\n'}
[14.524083] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.524605] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.525321] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/I2C_LCD_driver.py:72:4: E265 block comment should start with '# '\n"}
[14.525876] (-) TimerEvent: {}
[14.526408] (stem_pkg) StdoutLine: {'line': b'   #initializes objects and lcd\n'}
[14.527229] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.528127] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.528835] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:73:4: E111 indentation is not a multiple of four\n'}
[14.529541] (stem_pkg) StdoutLine: {'line': b'   def __init__(self):\n'}
[14.530210] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.530855] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.531468] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:74:7: E111 indentation is not a multiple of four\n'}
[14.532166] (stem_pkg) StdoutLine: {'line': b'      self.lcd_device = i2c_device(ADDRESS)\n'}
[14.532821] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.533388] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.534028] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:75:7: E111 indentation is not a multiple of four\n'}
[14.534717] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write(0x03)\n'}
[14.535327] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.535961] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.536589] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:76:7: E111 indentation is not a multiple of four\n'}
[14.537160] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write(0x03)\n'}
[14.537787] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.538377] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.538964] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:77:7: E111 indentation is not a multiple of four\n'}
[14.539603] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write(0x03)\n'}
[14.540228] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.540804] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.541378] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:78:7: E111 indentation is not a multiple of four\n'}
[14.541946] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write(0x02)\n'}
[14.542507] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.543109] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.543667] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:79:7: E111 indentation is not a multiple of four\n'}
[14.544394] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write(LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS | LCD_4BITMODE)\n'}
[14.545132] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.545724] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.546289] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:80:7: E111 indentation is not a multiple of four\n'}
[14.546849] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write(LCD_DISPLAYCONTROL | LCD_DISPLAYON)\n'}
[14.547421] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.548018] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.548533] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:81:7: E111 indentation is not a multiple of four\n'}
[14.549063] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write(LCD_CLEARDISPLAY)\n'}
[14.549610] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.550127] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.550729] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:82:7: E111 indentation is not a multiple of four\n'}
[14.551350] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write(LCD_ENTRYMODESET | LCD_ENTRYLEFT)\n'}
[14.551979] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.552641] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.553273] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:83:7: E111 indentation is not a multiple of four\n'}
[14.553895] (stem_pkg) StdoutLine: {'line': b'      sleep(0.2)\n'}
[14.554568] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.555201] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.555845] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:84:4: E114 indentation is not a multiple of four (comment)\n'}
[14.556498] (stem_pkg) StdoutLine: {'line': b'   # clocks EN to latch command\n'}
[14.557145] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.557918] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.558582] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:85:4: E301 expected 1 blank line, found 0\n'}
[14.559251] (stem_pkg) StdoutLine: {'line': b'   def lcd_strobe(self, data):\n'}
[14.559977] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.560625] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.561265] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:85:4: E111 indentation is not a multiple of four\n'}
[14.561916] (stem_pkg) StdoutLine: {'line': b'   def lcd_strobe(self, data):\n'}
[14.562523] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.563117] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.563689] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:86:7: E111 indentation is not a multiple of four\n'}
[14.564383] (stem_pkg) StdoutLine: {'line': b'      self.lcd_device.write_cmd(data | En | LCD_BACKLIGHT)\n'}
[14.564976] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.565561] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.566181] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:87:7: E111 indentation is not a multiple of four\n'}
[14.566759] (stem_pkg) StdoutLine: {'line': b'      sleep(.0005)\n'}
[14.567407] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.568310] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.569091] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:88:7: E111 indentation is not a multiple of four\n'}
[14.569794] (stem_pkg) StdoutLine: {'line': b'      self.lcd_device.write_cmd(((data & ~En) | LCD_BACKLIGHT))\n'}
[14.570536] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.571220] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.571948] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:89:7: E111 indentation is not a multiple of four\n'}
[14.572557] (stem_pkg) StdoutLine: {'line': b'      sleep(.0001)\n'}
[14.573126] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.573742] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.574288] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:90:4: E301 expected 1 blank line, found 0\n'}
[14.574744] (stem_pkg) StdoutLine: {'line': b'   def lcd_write_four_bits(self, data):\n'}
[14.575332] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.576094] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.576762] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:90:4: E111 indentation is not a multiple of four\n'}
[14.577335] (stem_pkg) StdoutLine: {'line': b'   def lcd_write_four_bits(self, data):\n'}
[14.577918] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.578491] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.579110] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:91:7: E111 indentation is not a multiple of four\n'}
[14.579681] (stem_pkg) StdoutLine: {'line': b'      self.lcd_device.write_cmd(data | LCD_BACKLIGHT)\n'}
[14.580353] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.581096] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.581779] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:92:7: E111 indentation is not a multiple of four\n'}
[14.582355] (stem_pkg) StdoutLine: {'line': b'      self.lcd_strobe(data)\n'}
[14.582924] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.583531] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.584234] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:93:4: E114 indentation is not a multiple of four (comment)\n'}
[14.584902] (stem_pkg) StdoutLine: {'line': b'   # write a command to lcd\n'}
[14.585671] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.586363] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.586950] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:94:4: E301 expected 1 blank line, found 0\n'}
[14.587560] (stem_pkg) StdoutLine: {'line': b'   def lcd_write(self, cmd, mode=0):\n'}
[14.588206] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.588857] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.589479] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:94:4: E111 indentation is not a multiple of four\n'}
[14.590279] (stem_pkg) StdoutLine: {'line': b'   def lcd_write(self, cmd, mode=0):\n'}
[14.591231] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.592690] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.593668] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:95:7: E111 indentation is not a multiple of four\n'}
[14.594388] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write_four_bits(mode | (cmd & 0xF0))\n'}
[14.594993] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.595770] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.596534] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:96:7: E111 indentation is not a multiple of four\n'}
[14.597456] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write_four_bits(mode | ((cmd << 4) & 0xF0))\n'}
[14.598233] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.599063] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.599913] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:97:4: E114 indentation is not a multiple of four (comment)\n'}
[14.600912] (stem_pkg) StdoutLine: {'line': b'   # write a character to lcd (or character rom) 0x09: backlight | RS=DR<\n'}
[14.601860] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.602464] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.603090] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:98:4: E114 indentation is not a multiple of four (comment)\n'}
[14.603773] (stem_pkg) StdoutLine: {'line': b'   # works!\n'}
[14.604453] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.605089] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.605744] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:99:4: E301 expected 1 blank line, found 0\n'}
[14.606523] (stem_pkg) StdoutLine: {'line': b'   def lcd_write_char(self, charvalue, mode=1):\n'}
[14.607575] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.608648] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.609555] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:99:4: E111 indentation is not a multiple of four\n'}
[14.610547] (stem_pkg) StdoutLine: {'line': b'   def lcd_write_char(self, charvalue, mode=1):\n'}
[14.611287] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.612017] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.612678] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:100:7: E111 indentation is not a multiple of four\n'}
[14.613349] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write_four_bits(mode | (charvalue & 0xF0))\n'}
[14.613987] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.614596] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.615168] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:101:7: E111 indentation is not a multiple of four\n'}
[14.615770] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write_four_bits(mode | ((charvalue << 4) & 0xF0))\n'}
[14.616419] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.616992] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.617601] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:102:1: W293 blank line contains whitespace\n'}
[14.618314] (stem_pkg) StdoutLine: {'line': b'  \n'}
[14.618908] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.619489] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.620169] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:103:4: E114 indentation is not a multiple of four (comment)\n'}
[14.620789] (stem_pkg) StdoutLine: {'line': b'   # put string function with optional char positioning\n'}
[14.621414] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.622017] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.622676] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:104:4: E111 indentation is not a multiple of four\n'}
[14.623211] (stem_pkg) StdoutLine: {'line': b'   def lcd_display_string(self, string, line=1, pos=0):\n'}
[14.623675] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.624203] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.624693] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:106:7: E111 indentation is not a multiple of four\n'}
[14.625222] (stem_pkg) StdoutLine: {'line': b'      pos_new = pos\n'}
[14.625784] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.626315] (-) TimerEvent: {}
[14.626850] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.627661] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:108:7: E111 indentation is not a multiple of four\n'}
[14.628453] (stem_pkg) StdoutLine: {'line': b'      pos_new = 0x40 + pos\n'}
[14.629170] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.629873] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.630522] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:110:7: E111 indentation is not a multiple of four\n'}
[14.631193] (stem_pkg) StdoutLine: {'line': b'      pos_new = 0x14 + pos\n'}
[14.631881] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.632615] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.633347] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:112:7: E111 indentation is not a multiple of four\n'}
[14.634018] (stem_pkg) StdoutLine: {'line': b'      pos_new = 0x54 + pos\n'}
[14.634651] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.635185] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.635757] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:115:7: E111 indentation is not a multiple of four\n'}
[14.636464] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write(ord(char), Rs)\n'}
[14.637114] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.637792] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.638423] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:116:4: E114 indentation is not a multiple of four (comment)\n'}
[14.639009] (stem_pkg) StdoutLine: {'line': b'   # clear lcd and set to home\n'}
[14.639605] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.640259] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.640839] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:117:4: E301 expected 1 blank line, found 0\n'}
[14.641456] (stem_pkg) StdoutLine: {'line': b'   def lcd_clear(self):\n'}
[14.642030] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.642697] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.643301] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:117:4: E111 indentation is not a multiple of four\n'}
[14.643950] (stem_pkg) StdoutLine: {'line': b'   def lcd_clear(self):\n'}
[14.644554] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.645138] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.645716] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:118:7: E111 indentation is not a multiple of four\n'}
[14.646281] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write(LCD_CLEARDISPLAY)\n'}
[14.646835] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.647587] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.648308] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:119:7: E111 indentation is not a multiple of four\n'}
[14.648947] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write(LCD_RETURNHOME)\n'}
[14.649524] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.650069] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.650652] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:120:4: E114 indentation is not a multiple of four (comment)\n'}
[14.651221] (stem_pkg) StdoutLine: {'line': b'   # define backlight on/off (lcd.backlight(1); off= lcd.backlight(0)\n'}
[14.651835] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.652534] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.653227] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:121:4: E301 expected 1 blank line, found 0\n'}
[14.653841] (stem_pkg) StdoutLine: {'line': b'   def backlight(self, state): # for state, 1 = on, 0 = off\n'}
[14.654458] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.655119] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.655868] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:121:4: E111 indentation is not a multiple of four\n'}
[14.656704] (stem_pkg) StdoutLine: {'line': b'   def backlight(self, state): # for state, 1 = on, 0 = off\n'}
[14.657409] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.657998] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.658576] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:121:31: E261 at least two spaces before inline comment\n'}
[14.659193] (stem_pkg) StdoutLine: {'line': b'   def backlight(self, state): # for state, 1 = on, 0 = off\n'}
[14.659793] (stem_pkg) StdoutLine: {'line': b'                              ^\n'}
[14.660385] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.660942] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:122:7: E111 indentation is not a multiple of four\n'}
[14.661575] (stem_pkg) StdoutLine: {'line': b'      if state == 1:\n'}
[14.662188] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.662762] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.663326] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:123:10: E111 indentation is not a multiple of four\n'}
[14.663945] (stem_pkg) StdoutLine: {'line': b'         self.lcd_device.write_cmd(LCD_BACKLIGHT)\n'}
[14.664560] (stem_pkg) StdoutLine: {'line': b'         ^\n'}
[14.665145] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.665688] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:124:7: E111 indentation is not a multiple of four\n'}
[14.666237] (stem_pkg) StdoutLine: {'line': b'      elif state == 0:\n'}
[14.666844] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.667385] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.667995] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:125:10: E111 indentation is not a multiple of four\n'}
[14.668589] (stem_pkg) StdoutLine: {'line': b'         self.lcd_device.write_cmd(LCD_NOBACKLIGHT)\n'}
[14.669168] (stem_pkg) StdoutLine: {'line': b'         ^\n'}
[14.669851] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.670498] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:126:4: E114 indentation is not a multiple of four (comment)\n'}
[14.671191] (stem_pkg) StdoutLine: {'line': b'   # add custom characters (0 - 7)\n'}
[14.672026] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.672571] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.673126] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:127:4: E301 expected 1 blank line, found 0\n'}
[14.673628] (stem_pkg) StdoutLine: {'line': b'   def lcd_load_custom_chars(self, fontdata):\n'}
[14.674148] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.674679] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.675230] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:127:4: E111 indentation is not a multiple of four\n'}
[14.675820] (stem_pkg) StdoutLine: {'line': b'   def lcd_load_custom_chars(self, fontdata):\n'}
[14.676592] (stem_pkg) StdoutLine: {'line': b'   ^\n'}
[14.677394] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.678023] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:128:7: E111 indentation is not a multiple of four\n'}
[14.678603] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write(0x40);\n'}
[14.679176] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.679778] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.680381] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:128:27: E703 statement ends with a semicolon\n'}
[14.680975] (stem_pkg) StdoutLine: {'line': b'      self.lcd_write(0x40);\n'}
[14.681667] (stem_pkg) StdoutLine: {'line': b'                          ^\n'}
[14.682257] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.682880] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:129:7: E111 indentation is not a multiple of four\n'}
[14.683481] (stem_pkg) StdoutLine: {'line': b'      for char in fontdata:\n'}
[14.684125] (stem_pkg) StdoutLine: {'line': b'      ^\n'}
[14.684692] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.685206] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:130:10: E111 indentation is not a multiple of four\n'}
[14.685800] (stem_pkg) StdoutLine: {'line': b'         for line in char:\n'}
[14.686428] (stem_pkg) StdoutLine: {'line': b'         ^\n'}
[14.686996] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.687622] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/I2C_LCD_driver.py:131:41: W292 no newline at end of file\n'}
[14.688255] (stem_pkg) StdoutLine: {'line': b'            self.lcd_write_char(line)                                           ^\n'}
[14.688837] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.689411] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:5:1: I100 Import statements are in the wrong order. 'import RPi.GPIO' should be before 'from std_msgs.msg import String'\n"}
[14.689954] (stem_pkg) StdoutLine: {'line': b'import RPi.GPIO as GPIO\n'}
[14.690515] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.691048] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.691657] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:7:1: E302 expected 2 blank lines, found 1\n'}
[14.692378] (stem_pkg) StdoutLine: {'line': b'class Controller(Node) :\n'}
[14.692940] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.693522] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.694089] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:7:23: E203 whitespace before ':'\n"}
[14.694575] (stem_pkg) StdoutLine: {'line': b'class Controller(Node) :\n'}
[14.695067] (stem_pkg) StdoutLine: {'line': b'                      ^\n'}
[14.695535] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.696126] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:8:1: CNL100 Class definition does not have a new line.\n'}
[14.696810] (stem_pkg) StdoutLine: {'line': b'    def __init__(self):\n'}
[14.697389] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.697972] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.698544] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:15:1: W293 blank line contains whitespace\n'}
[14.699089] (stem_pkg) StdoutLine: {'line': b'        \n'}
[14.699605] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.700313] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.700849] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:19:60: E261 at least two spaces before inline comment\n'}
[14.701497] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(12, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #RED\n'}
[14.702148] (stem_pkg) StdoutLine: {'line': b'                                                           ^\n'}
[14.702732] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.703322] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:19:61: E262 inline comment should start with '# '\n"}
[14.703964] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(12, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #RED\n'}
[14.704541] (stem_pkg) StdoutLine: {'line': b'                                                            ^\n'}
[14.705103] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.705694] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:20:60: E261 at least two spaces before inline comment\n'}
[14.706342] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(13, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #ORANGE\n'}
[14.706873] (stem_pkg) StdoutLine: {'line': b'                                                           ^\n'}
[14.707380] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.708043] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:20:61: E262 inline comment should start with '# '\n"}
[14.708650] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(13, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #ORANGE\n'}
[14.709184] (stem_pkg) StdoutLine: {'line': b'                                                            ^\n'}
[14.709799] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.710402] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:22:60: E261 at least two spaces before inline comment\n'}
[14.710985] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(19, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #YELLOW\n'}
[14.711542] (stem_pkg) StdoutLine: {'line': b'                                                           ^\n'}
[14.712211] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.712849] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:22:61: E262 inline comment should start with '# '\n"}
[14.713385] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(19, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #YELLOW\n'}
[14.713942] (stem_pkg) StdoutLine: {'line': b'                                                            ^\n'}
[14.714557] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.715122] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:23:60: E261 at least two spaces before inline comment\n'}
[14.715790] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(16, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #GREEN\n'}
[14.716430] (stem_pkg) StdoutLine: {'line': b'                                                           ^\n'}
[14.716982] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.717573] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:23:61: E262 inline comment should start with '# '\n"}
[14.718165] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(16, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #GREEN\n'}
[14.718742] (stem_pkg) StdoutLine: {'line': b'                                                            ^\n'}
[14.719348] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.719955] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:25:60: E261 at least two spaces before inline comment\n'}
[14.720657] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(20, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #BLUE\n'}
[14.721314] (stem_pkg) StdoutLine: {'line': b'                                                           ^\n'}
[14.721925] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.722540] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:25:61: E262 inline comment should start with '# '\n"}
[14.723118] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(20, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #BLUE\n'}
[14.723728] (stem_pkg) StdoutLine: {'line': b'                                                            ^\n'}
[14.724362] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.724898] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:26:60: E261 at least two spaces before inline comment\n'}
[14.725573] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(26, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #VIOLET\n'}
[14.726235] (stem_pkg) StdoutLine: {'line': b'                                                           ^\n'}
[14.726809] (-) TimerEvent: {}
[14.727332] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.728168] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:26:61: E262 inline comment should start with '# '\n"}
[14.728845] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(26, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #VIOLET\n'}
[14.729371] (stem_pkg) StdoutLine: {'line': b'                                                            ^\n'}
[14.729978] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.730695] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:28:60: E261 at least two spaces before inline comment\n'}
[14.731308] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(21, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #BROWN\n'}
[14.731943] (stem_pkg) StdoutLine: {'line': b'                                                           ^\n'}
[14.732518] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.733107] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:28:61: E262 inline comment should start with '# '\n"}
[14.733721] (stem_pkg) StdoutLine: {'line': b'        GPIO.setup(21, GPIO.IN, pull_up_down=GPIO.PUD_DOWN) #BROWN\n'}
[14.734257] (stem_pkg) StdoutLine: {'line': b'                                                            ^\n'}
[14.734914] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.735512] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:30:9: E265 block comment should start with '# '\n"}
[14.736148] (stem_pkg) StdoutLine: {'line': b'        #GPIO.setup(17, GPIO.IN, GPIO.PUD_UP) #black toggle yellow\n'}
[14.736773] (stem_pkg) StdoutLine: {'line': b'        ^\n'}
[14.737283] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.737829] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:31:9: E265 block comment should start with '# '\n"}
[14.738387] (stem_pkg) StdoutLine: {'line': b'        #GPIO.setup(18, GPIO.IN, GPIO.PUD_UP) #black toggle greeen\n'}
[14.738889] (stem_pkg) StdoutLine: {'line': b'        ^\n'}
[14.739418] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.740099] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:33:57: E251 unexpected spaces around keyword / parameter equals\n'}
[14.740744] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(12, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.741373] (stem_pkg) StdoutLine: {'line': b'                                                        ^\n'}
[14.741981] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.742601] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:33:59: E251 unexpected spaces around keyword / parameter equals\n'}
[14.743184] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(12, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.743836] (stem_pkg) StdoutLine: {'line': b'                                                          ^\n'}
[14.744552] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.745851] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:34:57: E251 unexpected spaces around keyword / parameter equals\n'}
[14.746996] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(13, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.747807] (stem_pkg) StdoutLine: {'line': b'                                                        ^\n'}
[14.748460] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.749067] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:34:59: E251 unexpected spaces around keyword / parameter equals\n'}
[14.749641] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(13, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.750296] (stem_pkg) StdoutLine: {'line': b'                                                          ^\n'}
[14.750784] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.751317] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:36:57: E251 unexpected spaces around keyword / parameter equals\n'}
[14.751876] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(19, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.752528] (stem_pkg) StdoutLine: {'line': b'                                                        ^\n'}
[14.753115] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.753753] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:36:59: E251 unexpected spaces around keyword / parameter equals\n'}
[14.754361] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(19, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.755105] (stem_pkg) StdoutLine: {'line': b'                                                          ^\n'}
[14.755792] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.756427] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:37:57: E251 unexpected spaces around keyword / parameter equals\n'}
[14.757023] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(16, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.757590] (stem_pkg) StdoutLine: {'line': b'                                                        ^\n'}
[14.758181] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.758755] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:37:59: E251 unexpected spaces around keyword / parameter equals\n'}
[14.759325] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(16, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.760011] (stem_pkg) StdoutLine: {'line': b'                                                          ^\n'}
[14.760648] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.761210] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:39:57: E251 unexpected spaces around keyword / parameter equals\n'}
[14.761825] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(20, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.762426] (stem_pkg) StdoutLine: {'line': b'                                                        ^\n'}
[14.763056] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.763649] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:39:59: E251 unexpected spaces around keyword / parameter equals\n'}
[14.764363] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(20, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.765118] (stem_pkg) StdoutLine: {'line': b'                                                          ^\n'}
[14.765766] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.766761] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:40:57: E251 unexpected spaces around keyword / parameter equals\n'}
[14.767479] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(26, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.768126] (stem_pkg) StdoutLine: {'line': b'                                                        ^\n'}
[14.768783] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.769511] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:40:59: E251 unexpected spaces around keyword / parameter equals\n'}
[14.770109] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(26, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.770688] (stem_pkg) StdoutLine: {'line': b'                                                          ^\n'}
[14.771221] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.771926] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:42:57: E251 unexpected spaces around keyword / parameter equals\n'}
[14.772573] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(21, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.773424] (stem_pkg) StdoutLine: {'line': b'                                                        ^\n'}
[14.774214] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.774927] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:42:59: E251 unexpected spaces around keyword / parameter equals\n'}
[14.775675] (stem_pkg) StdoutLine: {'line': b'        GPIO.add_event_detect(21, GPIO.FALLING, callback = self.on_press, bouncetime=100)\n'}
[14.776514] (stem_pkg) StdoutLine: {'line': b'                                                          ^\n'}
[14.777336] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.778066] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:46:9: E265 block comment should start with '# '\n"}
[14.778775] (stem_pkg) StdoutLine: {'line': b'        #GPIO.wait_for_edge(18, GPIO.RISING, bouncetime = 10)\n'}
[14.779552] (stem_pkg) StdoutLine: {'line': b'        ^\n'}
[14.780385] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.781058] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:48:43: E203 whitespace before ':'\n"}
[14.781559] (stem_pkg) StdoutLine: {'line': b'    def publish_key_command_msg(self, msg) :\n'}
[14.782209] (stem_pkg) StdoutLine: {'line': b'                                          ^\n'}
[14.782841] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.783817] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:55:32: E203 whitespace before ':'\n"}
[14.784712] (stem_pkg) StdoutLine: {'line': b'        if msg.data is not None :\n'}
[14.785314] (stem_pkg) StdoutLine: {'line': b'                               ^\n'}
[14.785917] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.786547] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:60:19: E203 whitespace before ':'\n"}
[14.787125] (stem_pkg) StdoutLine: {'line': b'        if k == 12 :\n'}
[14.787765] (stem_pkg) StdoutLine: {'line': b'                  ^\n'}
[14.788413] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.789122] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:61:17: Q000 Double quotes found but single quotes preferred\n'}
[14.789721] (stem_pkg) StdoutLine: {'line': b'            c = "up"\n'}
[14.790343] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[14.790893] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.791519] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:62:21: E203 whitespace before ':'\n"}
[14.792238] (stem_pkg) StdoutLine: {'line': b'        elif k == 13 :\n'}
[14.792842] (stem_pkg) StdoutLine: {'line': b'                    ^\n'}
[14.793613] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.794445] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:63:17: Q000 Double quotes found but single quotes preferred\n'}
[14.795088] (stem_pkg) StdoutLine: {'line': b'            c = "left"\n'}
[14.795735] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[14.796455] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.797121] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:64:21: E203 whitespace before ':'\n"}
[14.797788] (stem_pkg) StdoutLine: {'line': b'        elif k == 19 :\n'}
[14.798404] (stem_pkg) StdoutLine: {'line': b'                    ^\n'}
[14.799038] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.799746] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:65:17: Q000 Double quotes found but single quotes preferred\n'}
[14.800432] (stem_pkg) StdoutLine: {'line': b'            c = "init"\n'}
[14.800983] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[14.801723] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.802481] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:66:21: E203 whitespace before ':'\n"}
[14.803177] (stem_pkg) StdoutLine: {'line': b'        elif k == 16 :\n'}
[14.803953] (stem_pkg) StdoutLine: {'line': b'                    ^\n'}
[14.804633] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.805304] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:67:17: Q000 Double quotes found but single quotes preferred\n'}
[14.805804] (stem_pkg) StdoutLine: {'line': b'            c = "down"\n'}
[14.806339] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[14.806889] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.807482] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:68:21: E203 whitespace before ':'\n"}
[14.808195] (stem_pkg) StdoutLine: {'line': b'        elif k == 20 :\n'}
[14.808841] (stem_pkg) StdoutLine: {'line': b'                    ^\n'}
[14.809680] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.810342] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:69:17: Q000 Double quotes found but single quotes preferred\n'}
[14.810961] (stem_pkg) StdoutLine: {'line': b'            c = "turn left"\n'}
[14.811601] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[14.812345] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.812937] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:70:21: E203 whitespace before ':'\n"}
[14.813564] (stem_pkg) StdoutLine: {'line': b'        elif k == 26 :\n'}
[14.814191] (stem_pkg) StdoutLine: {'line': b'                    ^\n'}
[14.814742] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.815304] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:71:17: Q000 Double quotes found but single quotes preferred\n'}
[14.815845] (stem_pkg) StdoutLine: {'line': b'            c = "turn right"\n'}
[14.816436] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[14.817027] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.817649] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:72:21: E203 whitespace before ':'\n"}
[14.818239] (stem_pkg) StdoutLine: {'line': b'        elif k == 21 :\n'}
[14.818894] (stem_pkg) StdoutLine: {'line': b'                    ^\n'}
[14.819497] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.820149] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:73:17: Q000 Double quotes found but single quotes preferred\n'}
[14.821043] (stem_pkg) StdoutLine: {'line': b'            c = "right"\n'}
[14.821820] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[14.822453] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.823086] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:74:21: E203 whitespace before ':'\n"}
[14.823731] (stem_pkg) StdoutLine: {'line': b'        elif k == 18 :\n'}
[14.824390] (stem_pkg) StdoutLine: {'line': b'                    ^\n'}
[14.825007] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.825571] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:75:17: Q000 Double quotes found but single quotes preferred\n'}
[14.826154] (stem_pkg) StdoutLine: {'line': b'            c = "True"\n'}
[14.826724] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[14.827262] (-) TimerEvent: {}
[14.827833] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.828634] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:76:21: E203 whitespace before ':'\n"}
[14.829373] (stem_pkg) StdoutLine: {'line': b'        elif k == 17 :\n'}
[14.829990] (stem_pkg) StdoutLine: {'line': b'                    ^\n'}
[14.830621] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.831365] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:77:17: Q000 Double quotes found but single quotes preferred\n'}
[14.832057] (stem_pkg) StdoutLine: {'line': b'            c = "False"\n'}
[14.832620] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[14.833251] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.833900] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:78:13: E203 whitespace before ':'\n"}
[14.834464] (stem_pkg) StdoutLine: {'line': b'        else :\n'}
[14.835061] (stem_pkg) StdoutLine: {'line': b'            ^\n'}
[14.835628] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.836218] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:83:20: E203 whitespace before ':'\n"}
[14.836730] (stem_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[14.837196] (stem_pkg) StdoutLine: {'line': b'                   ^\n'}
[14.837669] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.838250] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:95:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[14.838763] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[14.839256] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.839775] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.840317] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/controller.py:95:26: E203 whitespace before ':'\n"}
[14.840845] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[14.841568] (stem_pkg) StdoutLine: {'line': b'                         ^\n'}
[14.842214] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.842882] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/controller.py:96:11: W292 no newline at end of file\n'}
[14.843498] (stem_pkg) StdoutLine: {'line': b'    main()          ^\n'}
[14.844197] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.844758] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/async_serial_talker.py:5:1: I100 Import statements are in the wrong order. 'import asyncio' should be before 'from std_msgs.msg import String' and in a different group.\n"}
[14.845340] (stem_pkg) StdoutLine: {'line': b'import asyncio\n'}
[14.845980] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.846546] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.847164] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/async_serial_talker.py:5:1: I201 Missing newline between import groups. 'import asyncio' is identified as Stdlib and 'from std_msgs.msg import String' is identified as Third Party.\n"}
[14.847862] (stem_pkg) StdoutLine: {'line': b'import asyncio\n'}
[14.848539] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.849127] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.849717] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/async_serial_talker.py:6:1: I201 Missing newline between import groups. 'import serial_asyncio' is identified as Third Party and 'import asyncio' is identified as Stdlib.\n"}
[14.850275] (stem_pkg) StdoutLine: {'line': b'import serial_asyncio\n'}
[14.850879] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.851423] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.852086] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/async_serial_talker.py:11:5: E301 expected 1 blank line, found 0\n'}
[14.852731] (stem_pkg) StdoutLine: {'line': b'    def __init__(self):\n'}
[14.853395] (stem_pkg) StdoutLine: {'line': b'    ^\n'}
[14.853990] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.854518] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/async_serial_talker.py:20:32: Q000 Double quotes found but single quotes preferred\n'}
[14.855050] (stem_pkg) StdoutLine: {'line': b'        self.get_logger().info("Serial connection started")\n'}
[14.855631] (stem_pkg) StdoutLine: {'line': b'                               ^\n'}
[14.856337] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.857036] (stem_pkg) StderrLine: {'line': b'\x1b[33m=============================== warnings summary ===============================\x1b[0m\n'}
[14.857879] (stem_pkg) StderrLine: {'line': b'../../../.local/lib/python3.8/site-packages/_pytest/nodes.py:633\n'}
[14.858500] (stem_pkg) StderrLine: {'line': b'  Warning: The (fspath: py.path.local) argument to Package is deprecated. Please use the (path: pathlib.Path) argument instead.\n'}
[14.859112] (stem_pkg) StderrLine: {'line': b'  See https://docs.pytest.org/en/latest/deprecations.html#fspath-argument-for-node-constructors-replaced-with-pathlib-path\n'}
[14.859690] (stem_pkg) StderrLine: {'line': b'\n'}
[14.860374] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/async_serial_talker.py:29:100: E501 line too long (102 > 99 characters)\n'}
[14.861049] (stem_pkg) StdoutLine: {'line': b'        _, writer = await serial_asyncio.open_serial_connection(url=self.SERIAL_PORT, baudrate=115200)\n'}
[14.861699] (stem_pkg) StdoutLine: {'line': b'                                                                                                   ^\n'}
[14.862282] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.862971] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/async_serial_talker.py:38:38: E203 whitespace before ':'\n"}
[14.863598] (stem_pkg) StdoutLine: {'line': b'    async def send(self, writer, msg) :\n'}
[14.864221] (stem_pkg) StdoutLine: {'line': b'                                     ^\n'}
[14.865018] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.865869] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/async_serial_talker.py:39:21: E203 whitespace before ':'\n"}
[14.866529] (stem_pkg) StdoutLine: {'line': b'        for c in msg :\n'}
[14.867028] (stem_pkg) StdoutLine: {'line': b'                    ^\n'}
[14.867673] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.868395] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/async_serial_talker.py:42:9: E265 block comment should start with '# '\n"}
[14.868980] (stem_pkg) StdoutLine: {'line': b"        #writer.write(b'_')\n"}
[14.869576] (stem_pkg) StdoutLine: {'line': b'        ^\n'}
[14.870203] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.870750] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/async_serial_talker.py:57:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[14.871314] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[14.872104] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.872845] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.873396] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/async_serial_talker.py:57:26: E203 whitespace before ':'\n"}
[14.873944] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[14.874461] (stem_pkg) StdoutLine: {'line': b'                         ^\n'}
[14.875089] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.875687] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/async_serial_talker.py:58:11: W292 no newline at end of file\n'}
[14.876403] (stem_pkg) StdoutLine: {'line': b'    main()          ^\n'}
[14.877107] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.877803] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/cmd_selector.py:6:1: E302 expected 2 blank lines, found 1\n'}
[14.878425] (stem_pkg) StdoutLine: {'line': b'class CommandSelector(Node):\n'}
[14.879003] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.879653] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.880358] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/cmd_selector.py:8:5: E301 expected 1 blank line, found 0\n'}
[14.880988] (stem_pkg) StdoutLine: {'line': b'    def __init__(self):\n'}
[14.881575] (stem_pkg) StdoutLine: {'line': b'    ^\n'}
[14.882200] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.882795] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/cmd_selector.py:44:1: E303 too many blank lines (3)\n'}
[14.883364] (stem_pkg) StdoutLine: {'line': b'def main(args=None):\n'}
[14.883964] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.884628] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.885201] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/cmd_selector.py:55:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[14.885877] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[14.886479] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.887071] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.887571] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/cmd_selector.py:55:26: E203 whitespace before ':'\n"}
[14.888172] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[14.888759] (stem_pkg) StdoutLine: {'line': b'                         ^\n'}
[14.889449] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.890017] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/cmd_selector.py:56:11: W292 no newline at end of file\n'}
[14.890592] (stem_pkg) StdoutLine: {'line': b'    main()          ^\n'}
[14.891196] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.891937] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/calculator.py:1:1: F401 'socket.NI_NUMERICHOST' imported but unused\n"}
[14.892656] (stem_pkg) StdoutLine: {'line': b'from socket import NI_NUMERICHOST\n'}
[14.893267] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.893939] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.894582] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/calculator.py:2:1: I201 Missing newline between import groups. 'import rclpy' is identified as Third Party and 'from socket import NI_NUMERICHOST' is identified as Stdlib.\n"}
[14.895205] (stem_pkg) StdoutLine: {'line': b'import rclpy\n'}
[14.895868] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.896502] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.897150] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/calculator.py:7:1: I100 Import statements are in the wrong order. 'import math' should be before 'from sunflower_interfaces.msg import TfliteResult' and in a different group.\n"}
[14.897693] (stem_pkg) StdoutLine: {'line': b'import math\n'}
[14.898262] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.898906] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.899512] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/calculator.py:7:1: I201 Missing newline between import groups. 'import math' is identified as Stdlib and 'from sunflower_interfaces.msg import TfliteResult' is identified as Third Party.\n"}
[14.900237] (stem_pkg) StdoutLine: {'line': b'import math\n'}
[14.900776] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.901334] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.901916] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/calculator.py:9:1: E302 expected 2 blank lines, found 1\n'}
[14.902432] (stem_pkg) StdoutLine: {'line': b'class Calculator(Node) :\n'}
[14.903066] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.903632] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.904245] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/calculator.py:9:23: E203 whitespace before ':'\n"}
[14.904831] (stem_pkg) StdoutLine: {'line': b'class Calculator(Node) :\n'}
[14.905388] (stem_pkg) StdoutLine: {'line': b'                      ^\n'}
[14.906030] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.906648] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/calculator.py:10:1: CNL100 Class definition does not have a new line.\n'}
[14.907244] (stem_pkg) StdoutLine: {'line': b'    def __init__(self):\n'}
[14.908007] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.908784] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.909402] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/calculator.py:23:35: E203 whitespace before ':'\n"}
[14.909999] (stem_pkg) StdoutLine: {'line': b'    def publish_command(self, cmd) :\n'}
[14.910653] (stem_pkg) StdoutLine: {'line': b'                                  ^\n'}
[14.911267] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.911885] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/calculator.py:31:30: Q000 Double quotes found but single quotes preferred\n'}
[14.912596] (stem_pkg) StdoutLine: {'line': b'        self.publish_command("".join(data))\n'}
[14.913237] (stem_pkg) StdoutLine: {'line': b'                             ^\n'}
[14.913876] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.914490] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/calculator.py:34:27: C417 Unnecessary use of map - use a generator expression instead.\n'}
[14.915273] (stem_pkg) StdoutLine: {'line': b'        n_x, n_y, n_con = map(lambda x: x, nose)\n'}
[14.915941] (stem_pkg) StdoutLine: {'line': b'                          ^\n'}
[14.916631] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.917224] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/calculator.py:35:27: C417 Unnecessary use of map - use a generator expression instead.\n'}
[14.917823] (stem_pkg) StdoutLine: {'line': b'        l_x, l_y, l_con = map(lambda x: x, eye_l)\n'}
[14.918375] (stem_pkg) StdoutLine: {'line': b'                          ^\n'}
[14.918956] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.919564] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/calculator.py:36:27: C417 Unnecessary use of map - use a generator expression instead.\n'}
[14.920207] (stem_pkg) StdoutLine: {'line': b'        r_x, r_y, r_con = map(lambda x: x, eye_r)\n'}
[14.920784] (stem_pkg) StdoutLine: {'line': b'                          ^\n'}
[14.921369] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.921937] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/calculator.py:62:1: W293 blank line contains whitespace\n'}
[14.922610] (stem_pkg) StdoutLine: {'line': b'    \n'}
[14.923262] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.923975] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.924548] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/calculator.py:65:10: E203 whitespace before ','\n"}
[14.925131] (stem_pkg) StdoutLine: {'line': b'        _ , nose_x, nose_confidence = map(lambda x: x, nose)\n'}
[14.925928] (stem_pkg) StdoutLine: {'line': b'         ^\n'}
[14.926571] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.927134] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/calculator.py:65:39: C417 Unnecessary use of map - use a generator expression instead.\n'}
[14.927781] (-) TimerEvent: {}
[14.928345] (stem_pkg) StdoutLine: {'line': b'        _ , nose_x, nose_confidence = map(lambda x: x, nose)\n'}
[14.929193] (stem_pkg) StdoutLine: {'line': b'                                      ^\n'}
[14.929862] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.930513] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/calculator.py:83:1: E302 expected 2 blank lines, found 1\n'}
[14.931288] (stem_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[14.932059] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.932759] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.933455] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/calculator.py:83:20: E203 whitespace before ':'\n"}
[14.934062] (stem_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[14.934685] (stem_pkg) StdoutLine: {'line': b'                   ^\n'}
[14.935315] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.936103] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/calculator.py:94:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[14.936744] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[14.937307] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.937908] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.938517] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/calculator.py:94:26: E203 whitespace before ':'\n"}
[14.939127] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[14.939859] (stem_pkg) StdoutLine: {'line': b'                         ^\n'}
[14.940570] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.941156] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/calculator.py:95:11: W292 no newline at end of file\n'}
[14.941670] (stem_pkg) StdoutLine: {'line': b'    main()          ^\n'}
[14.942289] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.942964] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor.py:5:1: I100 Import statements are in the wrong order. 'import cv2' should be before 'from sunflower_interfaces.msg import TfliteResult'\n"}
[14.943586] (stem_pkg) StdoutLine: {'line': b'import cv2\n'}
[14.944158] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.944644] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.945266] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor.py:7:1: I100 Import statements are in the wrong order. 'import numpy' should be before 'import tensorflow'\n"}
[14.945929] (stem_pkg) StdoutLine: {'line': b'import numpy as np\n'}
[14.947394] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.948092] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.948704] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor.py:9:1: E302 expected 2 blank lines, found 1\n'}
[14.949371] (stem_pkg) StdoutLine: {'line': b'class Tensor(Node) :\n'}
[14.950040] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.950721] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.951336] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor.py:9:19: E203 whitespace before ':'\n"}
[14.951991] (stem_pkg) StdoutLine: {'line': b'class Tensor(Node) :\n'}
[14.952592] (stem_pkg) StdoutLine: {'line': b'                  ^\n'}
[14.953194] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.953731] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor.py:10:1: CNL100 Class definition does not have a new line.\n'}
[14.954276] (stem_pkg) StdoutLine: {'line': b'    def __init__(self, interpreter, cap):\n'}
[14.954872] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.955471] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.956091] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor.py:20:46: E203 whitespace before ':'\n"}
[14.956637] (stem_pkg) StdoutLine: {'line': b'    def tensor_result(self, interpreter, cap) :\n'}
[14.957223] (stem_pkg) StdoutLine: {'line': b'                                             ^\n'}
[14.957809] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.958352] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor.py:41:9: F841 local variable 'data' is assigned to but never used\n"}
[14.958906] (stem_pkg) StdoutLine: {'line': b'        data = list()\n'}
[14.959459] (stem_pkg) StdoutLine: {'line': b'        ^\n'}
[14.960088] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.960745] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor.py:41:16: C408 Unnecessary list call - rewrite as a literal.\n'}
[14.961315] (stem_pkg) StdoutLine: {'line': b'        data = list()\n'}
[14.961876] (stem_pkg) StdoutLine: {'line': b'               ^\n'}
[14.962460] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.963068] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor.py:53:1: E302 expected 2 blank lines, found 1\n'}
[14.963761] (stem_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[14.964520] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.965188] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.965836] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor.py:53:20: E203 whitespace before ':'\n"}
[14.966463] (stem_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[14.967104] (stem_pkg) StdoutLine: {'line': b'                   ^\n'}
[14.968452] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.969960] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor.py:55:50: Q000 Double quotes found but single quotes preferred\n'}
[14.971533] (stem_pkg) StdoutLine: {'line': b'    interpreter = tf.lite.Interpreter(model_path="lite-model_movenet_singlepose_lightning_3.tflite")\n'}
[14.972816] (stem_pkg) StdoutLine: {'line': b'                                                 ^\n'}
[14.973510] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.974093] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor.py:55:100: E501 line too long (100 > 99 characters)\n'}
[14.974719] (stem_pkg) StdoutLine: {'line': b'    interpreter = tf.lite.Interpreter(model_path="lite-model_movenet_singlepose_lightning_3.tflite")\n'}
[14.975376] (stem_pkg) StdoutLine: {'line': b'                                                                                                   ^\n'}
[14.976117] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.976740] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor.py:67:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[14.977411] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[14.978171] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.979105] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.979679] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor.py:67:26: E203 whitespace before ':'\n"}
[14.980471] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[14.981181] (stem_pkg) StdoutLine: {'line': b'                         ^\n'}
[14.981994] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.982612] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor.py:70:1: E265 block comment should start with '# '\n"}
[14.983285] (stem_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8^\n'}
[14.984150] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.984935] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor.py:70:29: W292 no newline at end of file\n'}
[14.985698] (stem_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8                            ^\n'}
[14.986430] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.987336] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor.py:70:29: W292 no newline at end of file\n'}
[14.988203] (stem_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8                            ^\n'}
[14.988847] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.989337] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor.py:70:29: W292 no newline at end of file\n'}
[14.990023] (stem_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8                            ^\n'}
[14.990989] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.991598] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:5:1: I100 Import statements are in the wrong order. 'from pynput import keyboard' should be before 'from std_msgs.msg import String'\n"}
[14.992321] (stem_pkg) StdoutLine: {'line': b'from pynput import keyboard\n'}
[14.992921] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.993454] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.994220] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:7:1: E302 expected 2 blank lines, found 1\n'}
[14.994914] (stem_pkg) StdoutLine: {'line': b'class Tester(Node) :\n'}
[14.995542] (stem_pkg) StdoutLine: {'line': b'^\n'}
[14.996179] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.996773] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:7:19: E203 whitespace before ':'\n"}
[14.997435] (stem_pkg) StdoutLine: {'line': b'class Tester(Node) :\n'}
[14.998005] (stem_pkg) StdoutLine: {'line': b'                  ^\n'}
[14.998594] (stem_pkg) StdoutLine: {'line': b'\n'}
[14.999258] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:8:1: CNL100 Class definition does not have a new line.\n'}
[15.000018] (stem_pkg) StdoutLine: {'line': b'    def __init__(self):\n'}
[15.000699] (stem_pkg) StdoutLine: {'line': b'^\n'}
[15.001312] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.001880] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:16:21: E251 unexpected spaces around keyword / parameter equals\n'}
[15.002499] (stem_pkg) StdoutLine: {'line': b'            on_press = self.on_press,\n'}
[15.003104] (stem_pkg) StdoutLine: {'line': b'                    ^\n'}
[15.003607] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.004309] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:16:23: E251 unexpected spaces around keyword / parameter equals\n'}
[15.004845] (stem_pkg) StdoutLine: {'line': b'            on_press = self.on_press,\n'}
[15.005446] (stem_pkg) StdoutLine: {'line': b'                      ^\n'}
[15.006090] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.006727] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:17:23: E251 unexpected spaces around keyword / parameter equals\n'}
[15.007577] (stem_pkg) StdoutLine: {'line': b'            on_release = self.on_release)\n'}
[15.008294] (stem_pkg) StdoutLine: {'line': b'                      ^\n'}
[15.008859] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.009446] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:17:25: E251 unexpected spaces around keyword / parameter equals\n'}
[15.010086] (stem_pkg) StdoutLine: {'line': b'            on_release = self.on_release)\n'}
[15.010673] (stem_pkg) StderrLine: {'line': b'../../../../../opt/ros/foxy/lib/python3.8/site-packages/launch_testing/pytest/hooks.py:179\n'}
[15.011249] (stem_pkg) StderrLine: {'line': b'../../../../../opt/ros/foxy/lib/python3.8/site-packages/launch_testing/pytest/hooks.py:179\n'}
[15.011985] (stem_pkg) StderrLine: {'line': b'../../../../../opt/ros/foxy/lib/python3.8/site-packages/launch_testing/pytest/hooks.py:179\n'}
[15.012572] (stem_pkg) StderrLine: {'line': b'  Warning: The (fspath: py.path.local) argument to Module is deprecated. Please use the (path: pathlib.Path) argument instead.\n'}
[15.013153] (stem_pkg) StderrLine: {'line': b'  See https://docs.pytest.org/en/latest/deprecations.html#fspath-argument-for-node-constructors-replaced-with-pathlib-path\n'}
[15.018880] (stem_pkg) StderrLine: {'line': b'\n'}
[15.019850] (stem_pkg) StderrLine: {'line': b'../../../../../usr/lib/python3/dist-packages/pydocstyle/config.py:6\n'}
[15.020890] (stem_pkg) StderrLine: {'line': b"  Warning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n"}
[15.021904] (stem_pkg) StderrLine: {'line': b'\n'}
[15.022826] (stem_pkg) StderrLine: {'line': b'-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n'}
[15.023760] (stem_pkg) StdoutLine: {'line': b'                        ^\n'}
[15.024823] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.025533] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:21:43: E203 whitespace before ':'\n"}
[15.026164] (stem_pkg) StdoutLine: {'line': b'    def publish_key_command_msg(self, msg) :\n'}
[15.026722] (stem_pkg) StdoutLine: {'line': b'                                          ^\n'}
[15.027320] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.028121] (-) TimerEvent: {}
[15.028646] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:29:1: B901 blind except: statement\n'}
[15.029515] (stem_pkg) StdoutLine: {'line': b'        except:\n'}
[15.030237] (stem_pkg) StdoutLine: {'line': b'^\n'}
[15.030881] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.031628] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:29:9: E722 do not use bare 'except'\n"}
[15.032389] (stem_pkg) StdoutLine: {'line': b'        except:\n'}
[15.033046] (stem_pkg) StdoutLine: {'line': b'        ^\n'}
[15.033661] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.034229] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:32:32: E203 whitespace before ':'\n"}
[15.034844] (stem_pkg) StdoutLine: {'line': b'        if msg.data is not None :\n'}
[15.035448] (stem_pkg) StdoutLine: {'line': b'                               ^\n'}
[15.036172] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.036840] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:37:17: Q000 Double quotes found but single quotes preferred\n'}
[15.037463] (stem_pkg) StdoutLine: {'line': b'        if k == "w" :\n'}
[15.037995] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[15.038461] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.039059] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:37:20: E203 whitespace before ':'\n"}
[15.039618] (stem_pkg) StdoutLine: {'line': b'        if k == "w" :\n'}
[15.040198] (stem_pkg) StdoutLine: {'line': b'                   ^\n'}
[15.040730] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.041270] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:38:17: Q000 Double quotes found but single quotes preferred\n'}
[15.041820] (stem_pkg) StdoutLine: {'line': b'            c = "up"\n'}
[15.042351] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[15.042899] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.043576] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:39:19: Q000 Double quotes found but single quotes preferred\n'}
[15.044364] (stem_pkg) StdoutLine: {'line': b'        elif k == "s" :\n'}
[15.044942] (stem_pkg) StdoutLine: {'line': b'                  ^\n'}
[15.045519] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.046094] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:39:22: E203 whitespace before ':'\n"}
[15.046663] (stem_pkg) StdoutLine: {'line': b'        elif k == "s" :\n'}
[15.047268] (stem_pkg) StdoutLine: {'line': b'                     ^\n'}
[15.047877] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.048521] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:40:17: Q000 Double quotes found but single quotes preferred\n'}
[15.049100] (stem_pkg) StdoutLine: {'line': b'            c = "down"\n'}
[15.049707] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[15.050287] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.050852] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:41:19: Q000 Double quotes found but single quotes preferred\n'}
[15.051528] (stem_pkg) StdoutLine: {'line': b'        elif k == "a" :\n'}
[15.052193] (stem_pkg) StdoutLine: {'line': b'                  ^\n'}
[15.052742] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.053335] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:41:22: E203 whitespace before ':'\n"}
[15.053860] (stem_pkg) StdoutLine: {'line': b'        elif k == "a" :\n'}
[15.054424] (stem_pkg) StdoutLine: {'line': b'                     ^\n'}
[15.055029] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.055584] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:42:17: Q000 Double quotes found but single quotes preferred\n'}
[15.056231] (stem_pkg) StdoutLine: {'line': b'            c = "left"\n'}
[15.056795] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[15.057352] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.057943] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:43:19: Q000 Double quotes found but single quotes preferred\n'}
[15.058553] (stem_pkg) StdoutLine: {'line': b'        elif k == "d" :\n'}
[15.059079] (stem_pkg) StdoutLine: {'line': b'                  ^\n'}
[15.059634] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.060507] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:43:22: E203 whitespace before ':'\n"}
[15.061172] (stem_pkg) StdoutLine: {'line': b'        elif k == "d" :\n'}
[15.061786] (stem_pkg) StdoutLine: {'line': b'                     ^\n'}
[15.062345] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.062885] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:44:17: Q000 Double quotes found but single quotes preferred\n'}
[15.063448] (stem_pkg) StdoutLine: {'line': b'            c = "right"\n'}
[15.064032] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[15.064580] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.065135] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:45:19: Q000 Double quotes found but single quotes preferred\n'}
[15.065714] (stem_pkg) StdoutLine: {'line': b'        elif k == "," :\n'}
[15.066235] (stem_pkg) StdoutLine: {'line': b'                  ^\n'}
[15.066770] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.067340] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:45:22: E203 whitespace before ':'\n"}
[15.067985] (stem_pkg) StdoutLine: {'line': b'        elif k == "," :\n'}
[15.068611] (stem_pkg) StdoutLine: {'line': b'                     ^\n'}
[15.069246] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.069788] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:46:17: Q000 Double quotes found but single quotes preferred\n'}
[15.070382] (stem_pkg) StdoutLine: {'line': b'            c = "turn left"\n'}
[15.070927] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[15.071513] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.072164] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:47:19: Q000 Double quotes found but single quotes preferred\n'}
[15.072723] (stem_pkg) StdoutLine: {'line': b'        elif k == "." :\n'}
[15.073459] (stem_pkg) StdoutLine: {'line': b'                  ^\n'}
[15.074141] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.074719] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:47:22: E203 whitespace before ':'\n"}
[15.075279] (stem_pkg) StdoutLine: {'line': b'        elif k == "." :\n'}
[15.075866] (stem_pkg) StdoutLine: {'line': b'                     ^\n'}
[15.076529] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.077153] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:48:17: Q000 Double quotes found but single quotes preferred\n'}
[15.077620] (stem_pkg) StdoutLine: {'line': b'            c = "turn right"\n'}
[15.078177] (stem_pkg) StdoutLine: {'line': b'                ^\n'}
[15.078868] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.079612] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:49:13: E203 whitespace before ':'\n"}
[15.080466] (stem_pkg) StdoutLine: {'line': b'        else :\n'}
[15.081129] (stem_pkg) StdoutLine: {'line': b'            ^\n'}
[15.081764] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.082295] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:57:1: E302 expected 2 blank lines, found 1\n'}
[15.082858] (stem_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[15.083386] (stem_pkg) StdoutLine: {'line': b'^\n'}
[15.084039] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.084611] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:57:20: E203 whitespace before ':'\n"}
[15.085158] (stem_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[15.085744] (stem_pkg) StdoutLine: {'line': b'                   ^\n'}
[15.086359] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.086989] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:68:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[15.087653] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[15.088452] (stem_pkg) StdoutLine: {'line': b'^\n'}
[15.089155] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.089845] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tester.py:68:26: E203 whitespace before ':'\n"}
[15.090495] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[15.091231] (stem_pkg) StdoutLine: {'line': b'                         ^\n'}
[15.092042] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.092897] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tester.py:69:11: W292 no newline at end of file\n'}
[15.093681] (stem_pkg) StdoutLine: {'line': b'    main()          ^\n'}
[15.094488] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.095237] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:5:1: I100 Import statements are in the wrong order. 'import cv2' should be before 'from std_msgs.msg import String'\n"}
[15.096009] (stem_pkg) StdoutLine: {'line': b'import cv2\n'}
[15.096729] (stem_pkg) StdoutLine: {'line': b'^\n'}
[15.097527] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.098991] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:7:1: I100 Import statements are in the wrong order. 'import numpy' should be before 'import tensorflow'\n"}
[15.100611] (stem_pkg) StdoutLine: {'line': b'import numpy as np\n'}
[15.101995] (stem_pkg) StdoutLine: {'line': b'^\n'}
[15.102858] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.103551] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:8:1: I100 Import statements are in the wrong order. 'import time' should be before 'import numpy' and in a different group.\n"}
[15.104278] (stem_pkg) StdoutLine: {'line': b'import time\n'}
[15.104944] (stem_pkg) StdoutLine: {'line': b'^\n'}
[15.105522] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.106219] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:8:1: I201 Missing newline between import groups. 'import time' is identified as Stdlib and 'import numpy' is identified as Third Party.\n"}
[15.106871] (stem_pkg) StdoutLine: {'line': b'import time\n'}
[15.107561] (stem_pkg) StdoutLine: {'line': b'^\n'}
[15.108262] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.108820] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:9:1: I201 Missing newline between import groups. 'import I2C_LCD_driver' is identified as Third Party and 'import time' is identified as Stdlib.\n"}
[15.109494] (stem_pkg) StdoutLine: {'line': b'import I2C_LCD_driver\n'}
[15.110155] (stem_pkg) StdoutLine: {'line': b'^\n'}
[15.110727] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.111328] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:12:1: E302 expected 2 blank lines, found 1\n'}
[15.112053] (stem_pkg) StdoutLine: {'line': b'class TensorPublisher(Node) :\n'}
[15.112673] (stem_pkg) StdoutLine: {'line': b'^\n'}
[15.113226] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.113864] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:12:28: E203 whitespace before ':'\n"}
[15.114425] (stem_pkg) StdoutLine: {'line': b'class TensorPublisher(Node) :\n'}
[15.115044] (stem_pkg) StdoutLine: {'line': b'                           ^\n'}
[15.115692] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.116469] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:13:1: CNL100 Class definition does not have a new line.\n'}
[15.117113] (stem_pkg) StdoutLine: {'line': b'    def __init__(self, interpreter, cap, mylcd):\n'}
[15.117683] (stem_pkg) StdoutLine: {'line': b'^\n'}
[15.118321] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.118961] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:17:34: Q000 Double quotes found but single quotes preferred\n'}
[15.119534] (stem_pkg) StdoutLine: {'line': b'        mylcd.lcd_display_string("",2)\n'}
[15.120171] (stem_pkg) StdoutLine: {'line': b'                                 ^\n'}
[15.120776] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.121450] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:17:36: E231 missing whitespace after ','\n"}
[15.122174] (stem_pkg) StdoutLine: {'line': b'        mylcd.lcd_display_string("",2)\n'}
[15.122885] (stem_pkg) StdoutLine: {'line': b'                                   ^\n'}
[15.123503] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.124186] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:23:16: Q000 Double quotes found but single quotes preferred\n'}
[15.124820] (stem_pkg) StdoutLine: {'line': b'        data = "!"+ \'{0:0^3}\'.format(f\'{small}\') + \'{0:0^3}\'.format(f\'{big}\') +"!"\n'}
[15.125425] (stem_pkg) StdoutLine: {'line': b'               ^\n'}
[15.126088] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.126838] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:23:19: E225 missing whitespace around operator\n'}
[15.127502] (stem_pkg) StdoutLine: {'line': b'        data = "!"+ \'{0:0^3}\'.format(f\'{small}\') + \'{0:0^3}\'.format(f\'{big}\') +"!"\n'}
[15.128187] (-) TimerEvent: {}
[15.128775] (stem_pkg) StdoutLine: {'line': b'                  ^\n'}
[15.129558] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.130292] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:23:80: E225 missing whitespace around operator\n'}
[15.130934] (stem_pkg) StdoutLine: {'line': b'        data = "!"+ \'{0:0^3}\'.format(f\'{small}\') + \'{0:0^3}\'.format(f\'{big}\') +"!"\n'}
[15.131731] (stem_pkg) StdoutLine: {'line': b'                                                                               ^\n'}
[15.132498] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.133127] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:23:80: Q000 Double quotes found but single quotes preferred\n'}
[15.133809] (stem_pkg) StdoutLine: {'line': b'        data = "!"+ \'{0:0^3}\'.format(f\'{small}\') + \'{0:0^3}\'.format(f\'{big}\') +"!"\n'}
[15.134441] (stem_pkg) StdoutLine: {'line': b'                                                                               ^\n'}
[15.135142] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.135859] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:25:34: Q000 Double quotes found but single quotes preferred\n'}
[15.136595] (stem_pkg) StdoutLine: {'line': b'        mylcd.lcd_display_string("",2)\n'}
[15.137192] (stem_pkg) StdoutLine: {'line': b'                                 ^\n'}
[15.137890] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.138521] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:25:36: E231 missing whitespace after ','\n"}
[15.139128] (stem_pkg) StdoutLine: {'line': b'        mylcd.lcd_display_string("",2)\n'}
[15.139780] (stem_pkg) StdoutLine: {'line': b'                                   ^\n'}
[15.141248] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.142856] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:26:34: Q000 Double quotes found but single quotes preferred\n'}
[15.143564] (stem_pkg) StdoutLine: {'line': b'        mylcd.lcd_display_string("Started",2)\n'}
[15.144260] (stem_pkg) StdoutLine: {'line': b'                                 ^\n'}
[15.144904] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.145560] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:26:43: E231 missing whitespace after ','\n"}
[15.146260] (stem_pkg) StdoutLine: {'line': b'        mylcd.lcd_display_string("Started",2)\n'}
[15.146948] (stem_pkg) StdoutLine: {'line': b'                                          ^\n'}
[15.147660] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.148390] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:31:50: E203 whitespace before ':'\n"}
[15.149163] (stem_pkg) StdoutLine: {'line': b'    def max_tensor(self, interpreter, cap, mylcd) :\n'}
[15.149934] (stem_pkg) StdoutLine: {'line': b'                                                 ^\n'}
[15.150634] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.151331] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:35:16: F821 undefined name 'now'\n"}
[15.152087] (stem_pkg) StdoutLine: {'line': b'        while (now <= 5) and cap.isOpened() :\n'}
[15.152792] (stem_pkg) StdoutLine: {'line': b'               ^\n'}
[15.153476] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.154104] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:35:44: E203 whitespace before ':'\n"}
[15.154716] (stem_pkg) StdoutLine: {'line': b'        while (now <= 5) and cap.isOpened() :\n'}
[15.155255] (stem_pkg) StdoutLine: {'line': b'                                           ^\n'}
[15.155770] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.156464] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:38:38: Q000 Double quotes found but single quotes preferred\n'}
[15.157052] (stem_pkg) StdoutLine: {'line': b'            mylcd.lcd_display_string("",2)\n'}
[15.157541] (stem_pkg) StdoutLine: {'line': b'                                     ^\n'}
[15.158073] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.158688] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:38:40: E231 missing whitespace after ','\n"}
[15.159265] (stem_pkg) StdoutLine: {'line': b'            mylcd.lcd_display_string("",2)\n'}
[15.159872] (stem_pkg) StdoutLine: {'line': b'                                       ^\n'}
[15.160422] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.160987] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:39:61: E231 missing whitespace after ','\n"}
[15.161528] (stem_pkg) StdoutLine: {'line': b"            mylcd.lcd_display_string(f'Started in {now} sec',2)\n"}
[15.162043] (stem_pkg) StdoutLine: {'line': b'                                                            ^\n'}
[15.162646] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.163201] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:56:20: C408 Unnecessary list call - rewrite as a literal.\n'}
[15.163787] (stem_pkg) StdoutLine: {'line': b'            data = list()\n'}
[15.164431] (stem_pkg) StdoutLine: {'line': b'                   ^\n'}
[15.164987] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.165520] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:58:32: E203 whitespace before ':'\n"}
[15.166118] (stem_pkg) StdoutLine: {'line': b'            for shape in shaped :\n'}
[15.166635] (stem_pkg) StdoutLine: {'line': b'                               ^\n'}
[15.167121] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.167584] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:60:44: C417 Unnecessary use of map - use a generator expression instead.\n'}
[15.168163] (stem_pkg) StdoutLine: {'line': b'            l_x, l_y, l_c, r_x, r_y, r_c = map(lambda x : x, data)\n'}
[15.168692] (stem_pkg) StdoutLine: {'line': b'                                           ^\n'}
[15.169171] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.169661] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:60:56: E203 whitespace before ':'\n"}
[15.170127] (stem_pkg) StdoutLine: {'line': b'            l_x, l_y, l_c, r_x, r_y, r_c = map(lambda x : x, data)\n'}
[15.170598] (stem_pkg) StdoutLine: {'line': b'                                                       ^\n'}
[15.171170] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.171650] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:62:13: E115 expected an indented block (comment)\n'}
[15.172202] (stem_pkg) StdoutLine: {'line': b'            # length\xeb\xa5\xbc float\xec\x9c\xbc\xeb\xa1\x9c \xeb\xb3\xb4\xeb\x82\xb4\xeb\x8f\x84 \xeb\x90\x98\xec\xa5\xac?\n'}
[15.172686] (stem_pkg) StdoutLine: {'line': b'            ^\n'}
[15.173303] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.173875] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:66:13: E203 whitespace before ':'\n"}
[15.174354] (stem_pkg) StdoutLine: {'line': b'        else :\n'}
[15.174864] (stem_pkg) StdoutLine: {'line': b'            ^\n'}
[15.175407] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.176018] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:69:46: E203 whitespace before ':'\n"}
[15.176517] (stem_pkg) StdoutLine: {'line': b'    def tensor_result(self, interpreter, cap) :\n'}
[15.176998] (stem_pkg) StdoutLine: {'line': b'                                             ^\n'}
[15.177493] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.178011] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:90:16: C408 Unnecessary list call - rewrite as a literal.\n'}
[15.178485] (stem_pkg) StdoutLine: {'line': b'        data = list()\n'}
[15.178948] (stem_pkg) StdoutLine: {'line': b'               ^\n'}
[15.179404] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.179888] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:92:28: E203 whitespace before ':'\n"}
[15.180392] (stem_pkg) StdoutLine: {'line': b'        for shape in shaped :\n'}
[15.180972] (stem_pkg) StdoutLine: {'line': b'                           ^\n'}
[15.181439] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.181917] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:95:20: Q000 Double quotes found but single quotes preferred\n'}
[15.182503] (stem_pkg) StdoutLine: {'line': b'        datastr = ["^"] + datastr\n'}
[15.182977] (stem_pkg) StdoutLine: {'line': b'                   ^\n'}
[15.183441] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.184029] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:96:20: Q000 Double quotes found but single quotes preferred\n'}
[15.184535] (stem_pkg) StdoutLine: {'line': b'        msg.data = "*".join(datastr)\n'}
[15.185024] (stem_pkg) StdoutLine: {'line': b'                   ^\n'}
[15.185538] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.185992] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:100:1: E302 expected 2 blank lines, found 1\n'}
[15.186468] (stem_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[15.186899] (stem_pkg) StdoutLine: {'line': b'^\n'}
[15.187370] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.187911] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:100:20: E203 whitespace before ':'\n"}
[15.188555] (stem_pkg) StdoutLine: {'line': b'def main(args=None) :\n'}
[15.189141] (stem_pkg) StdoutLine: {'line': b'                   ^\n'}
[15.189680] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.190339] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:102:50: Q000 Double quotes found but single quotes preferred\n'}
[15.190913] (stem_pkg) StdoutLine: {'line': b'    interpreter = tf.lite.Interpreter(model_path="lite-model_movenet_singlepose_lightning_3.tflite")\n'}
[15.191519] (stem_pkg) StdoutLine: {'line': b'                                                 ^\n'}
[15.192286] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.192869] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:102:100: E501 line too long (100 > 99 characters)\n'}
[15.193462] (stem_pkg) StdoutLine: {'line': b'    interpreter = tf.lite.Interpreter(model_path="lite-model_movenet_singlepose_lightning_3.tflite")\n'}
[15.194076] (stem_pkg) StdoutLine: {'line': b'                                                                                                   ^\n'}
[15.194678] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.195151] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:116:1: E305 expected 2 blank lines after class or function definition, found 1\n'}
[15.195678] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[15.196381] (stem_pkg) StdoutLine: {'line': b'^\n'}
[15.196958] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.197457] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:116:26: E203 whitespace before ':'\n"}
[15.197897] (stem_pkg) StdoutLine: {'line': b"if __name__ == '__main__' :\n"}
[15.198359] (stem_pkg) StdoutLine: {'line': b'                         ^\n'}
[15.198832] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.199290] (stem_pkg) StdoutLine: {'line': b"./stem_pkg/tensor_publisher.py:119:1: E265 block comment should start with '# '\n"}
[15.199778] (stem_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8^\n'}
[15.200378] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.200885] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:119:29: W292 no newline at end of file\n'}
[15.201341] (stem_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8                            ^\n'}
[15.201821] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.202317] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:119:29: W292 no newline at end of file\n'}
[15.202815] (stem_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8                            ^\n'}
[15.203335] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.203950] (stem_pkg) StdoutLine: {'line': b'./stem_pkg/tensor_publisher.py:119:29: W292 no newline at end of file\n'}
[15.204450] (stem_pkg) StdoutLine: {'line': b'#\xec\xbd\x94, \xec\x99\xbc\xeb\x88\x88, \xec\x98\xa4\xeb\x88\x88, \xec\x99\xbc\xea\xb7\x80, \xec\x98\xa4\xea\xb7\x80, \xec\x99\xbc\xec\x96\xb4\xea\xb9\xa8, \xec\x98\xa4\xec\x96\xb4\xea\xb9\xa8                            ^\n'}
[15.204978] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.205438] (stem_pkg) StdoutLine: {'line': b'1     B901 blind except: statement\n'}
[15.205901] (stem_pkg) StdoutLine: {'line': b'3     C408 Unnecessary list call - rewrite as a literal.\n'}
[15.206370] (stem_pkg) StdoutLine: {'line': b'5     C417 Unnecessary use of map - use a generator expression instead.\n'}
[15.206871] (stem_pkg) StdoutLine: {'line': b'6     CNL100 Class definition does not have a new line.\n'}
[15.207498] (stem_pkg) StdoutLine: {'line': b'61    E111 indentation is not a multiple of four\n'}
[15.208134] (stem_pkg) StdoutLine: {'line': b'9     E114 indentation is not a multiple of four (comment)\n'}
[15.208679] (stem_pkg) StdoutLine: {'line': b'1     E115 expected an indented block (comment)\n'}
[15.209226] (stem_pkg) StdoutLine: {'line': b"2     E202 whitespace before ')'\n"}
[15.209894] (stem_pkg) StdoutLine: {'line': b"51    E203 whitespace before ':'\n"}
[15.210504] (stem_pkg) StdoutLine: {'line': b'2     E225 missing whitespace around operator\n'}
[15.211048] (stem_pkg) StdoutLine: {'line': b"5     E231 missing whitespace after ','\n"}
[15.211638] (stem_pkg) StdoutLine: {'line': b'20    E251 unexpected spaces around keyword / parameter equals\n'}
[15.212289] (stem_pkg) StdoutLine: {'line': b'11    E261 at least two spaces before inline comment\n'}
[15.212888] (stem_pkg) StdoutLine: {'line': b"7     E262 inline comment should start with '# '\n"}
[15.213426] (stem_pkg) StdoutLine: {'line': b"11    E265 block comment should start with '# '\n"}
[15.213971] (stem_pkg) StdoutLine: {'line': b'16    E301 expected 1 blank line, found 0\n'}
[15.214503] (stem_pkg) StdoutLine: {'line': b'13    E302 expected 2 blank lines, found 1\n'}
[15.215134] (stem_pkg) StdoutLine: {'line': b'1     E303 too many blank lines (3)\n'}
[15.215793] (stem_pkg) StdoutLine: {'line': b'9     E305 expected 2 blank lines after class or function definition, found 0\n'}
[15.216423] (stem_pkg) StdoutLine: {'line': b'2     E402 module level import not at top of file\n'}
[15.216997] (stem_pkg) StdoutLine: {'line': b'3     E501 line too long (102 > 99 characters)\n'}
[15.217552] (stem_pkg) StdoutLine: {'line': b'1     E703 statement ends with a semicolon\n'}
[15.218182] (stem_pkg) StdoutLine: {'line': b"1     E722 do not use bare 'except'\n"}
[15.218852] (stem_pkg) StdoutLine: {'line': b"1     F401 'socket.NI_NUMERICHOST' imported but unused\n"}
[15.219446] (stem_pkg) StdoutLine: {'line': b"1     F821 undefined name 'now'\n"}
[15.220160] (stem_pkg) StdoutLine: {'line': b"1     F841 local variable 'data' is assigned to but never used\n"}
[15.220748] (stem_pkg) StdoutLine: {'line': b"13    I100 Import statements are in the wrong order. 'import os' should be before 'from setuptools import setup' and in a different group.\n"}
[15.221340] (stem_pkg) StdoutLine: {'line': b"8     I201 Missing newline between import groups. 'import os' is identified as Stdlib and 'from setuptools import setup' is identified as Third Party.\n"}
[15.221983] (stem_pkg) StdoutLine: {'line': b'39    Q000 Double quotes found but single quotes preferred\n'}
[15.222599] (stem_pkg) StdoutLine: {'line': b'1     W291 trailing whitespace\n'}
[15.223199] (stem_pkg) StdoutLine: {'line': b'15    W292 no newline at end of file\n'}
[15.223824] (stem_pkg) StdoutLine: {'line': b'3     W293 blank line contains whitespace\n'}
[15.224408] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.225073] (stem_pkg) StdoutLine: {'line': b'15 files checked\n'}
[15.225724] (stem_pkg) StdoutLine: {'line': b'323 errors\n'}
[15.226316] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.226859] (stem_pkg) StdoutLine: {'line': b"'B'-type errors: 1\n"}
[15.227496] (stem_pkg) StdoutLine: {'line': b"'C'-type errors: 14\n"}
[15.228202] (stem_pkg) StdoutLine: {'line': b"'E'-type errors: 226\n"}
[15.228727] (-) TimerEvent: {}
[15.229630] (stem_pkg) StdoutLine: {'line': b"'F'-type errors: 3\n"}
[15.230413] (stem_pkg) StdoutLine: {'line': b"'I'-type errors: 21\n"}
[15.231077] (stem_pkg) StdoutLine: {'line': b"'Q'-type errors: 39\n"}
[15.231986] (stem_pkg) StdoutLine: {'line': b"'W'-type errors: 19\n"}
[15.232706] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.233424] (stem_pkg) StdoutLine: {'line': b'Checked files:\n'}
[15.234030] (stem_pkg) StdoutLine: {'line': b'\n'}
[15.234700] (stem_pkg) StdoutLine: {'line': b'* ./setup.py\n'}
[15.235209] (stem_pkg) StdoutLine: {'line': b'* ./launch/stem.launch.py\n'}
[15.235872] (stem_pkg) StdoutLine: {'line': b'* ./stem_pkg/serial_talker.py\n'}
[15.236636] (stem_pkg) StdoutLine: {'line': b'* ./stem_pkg/__init__.py\n'}
[15.237333] (stem_pkg) StdoutLine: {'line': b'* ./stem_pkg/I2C_LCD_driver.py\n'}
[15.237881] (stem_pkg) StdoutLine: {'line': b'* ./stem_pkg/controller.py\n'}
[15.238483] (stem_pkg) StdoutLine: {'line': b'* ./stem_pkg/async_serial_talker.py\n'}
[15.239043] (stem_pkg) StdoutLine: {'line': b'* ./stem_pkg/cmd_selector.py\n'}
[15.239619] (stem_pkg) StdoutLine: {'line': b'* ./stem_pkg/calculator.py\n'}
[15.240215] (stem_pkg) StdoutLine: {'line': b'* ./stem_pkg/tensor.py\n'}
[15.240730] (stem_pkg) StdoutLine: {'line': b'* ./stem_pkg/tester.py\n'}
[15.241211] (stem_pkg) StdoutLine: {'line': b'* ./stem_pkg/tensor_publisher.py\n'}
[15.241729] (stem_pkg) StdoutLine: {'line': b'* ./test/test_flake8.py\n'}
[15.242261] (stem_pkg) StdoutLine: {'line': b'* ./test/test_copyright.py\n'}
[15.242827] (stem_pkg) StdoutLine: {'line': b'* ./test/test_pep257.py\n'}
[15.243331] (stem_pkg) StdoutLine: {'line': b'------- generated xml file: /home/pi/sunflower/build/stem_pkg/pytest.xml -------\n'}
[15.243939] (stem_pkg) StdoutLine: {'line': b'=========================== short test summary info ============================\n'}
[15.244539] (stem_pkg) StdoutLine: {'line': b'FAILED test/test_copyright.py::test_copyright - AssertionError: Found errors\n'}
[15.245074] (stem_pkg) StdoutLine: {'line': b'FAILED test/test_flake8.py::test_flake8 - AssertionError: Found 323 code styl...\n'}
[15.245593] (stem_pkg) StdoutLine: {'line': b'\x1b[31m=================== \x1b[31m\x1b[1m2 failed\x1b[0m, \x1b[32m1 passed\x1b[0m, \x1b[33m5 warnings\x1b[0m\x1b[31m in 4.65s\x1b[0m\x1b[31m ====================\x1b[0m\n'}
[15.246137] (test_pkg) StdoutLine: {'line': b'test/test_flake8.py \x1b[32m.\x1b[0m\x1b[33m                                                    [ 66%]\x1b[0m\n'}
[15.246746] (test_pkg) StdoutLine: {'line': b'test/test_pep257.py \x1b[32m.\x1b[0m\x1b[33m                                                    [100%]\x1b[0m\n'}
[15.247288] (test_pkg) StderrLine: {'line': b'\n'}
[15.247948] (test_pkg) StderrLine: {'line': b'\x1b[33m=============================== warnings summary ===============================\x1b[0m\n'}
[15.248498] (test_pkg) StderrLine: {'line': b'../../../../../opt/ros/foxy/lib/python3.8/site-packages/launch_testing/pytest/hooks.py:179\n'}
[15.249123] (test_pkg) StderrLine: {'line': b'../../../../../opt/ros/foxy/lib/python3.8/site-packages/launch_testing/pytest/hooks.py:179\n'}
[15.249659] (test_pkg) StderrLine: {'line': b'../../../../../opt/ros/foxy/lib/python3.8/site-packages/launch_testing/pytest/hooks.py:179\n'}
[15.250191] (test_pkg) StderrLine: {'line': b'  Warning: The (fspath: py.path.local) argument to Module is deprecated. Please use the (path: pathlib.Path) argument instead.\n'}
[15.250763] (test_pkg) StderrLine: {'line': b'  See https://docs.pytest.org/en/latest/deprecations.html#fspath-argument-for-node-constructors-replaced-with-pathlib-path\n'}
[15.251288] (test_pkg) StderrLine: {'line': b'\n'}
[15.251858] (test_pkg) StderrLine: {'line': b'../../../../../usr/lib/python3/dist-packages/pydocstyle/config.py:6\n'}
[15.252401] (test_pkg) StderrLine: {'line': b"  Warning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n"}
[15.252997] (test_pkg) StderrLine: {'line': b'\n'}
[15.253576] (test_pkg) StderrLine: {'line': b'../../../.local/lib/python3.8/site-packages/_pytest/nodes.py:633\n'}
[15.254278] (test_pkg) StderrLine: {'line': b'  Warning: The (fspath: py.path.local) argument to Package is deprecated. Please use the (path: pathlib.Path) argument instead.\n'}
[15.254842] (test_pkg) StderrLine: {'line': b'  See https://docs.pytest.org/en/latest/deprecations.html#fspath-argument-for-node-constructors-replaced-with-pathlib-path\n'}
[15.255420] (test_pkg) StderrLine: {'line': b'\n'}
[15.256048] (test_pkg) StderrLine: {'line': b'-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n'}
[15.256630] (test_pkg) StdoutLine: {'line': b'------- generated xml file: /home/pi/sunflower/build/test_pkg/pytest.xml -------\n'}
[15.257209] (test_pkg) StdoutLine: {'line': b'\x1b[33m======================== \x1b[32m3 passed\x1b[0m, \x1b[33m\x1b[1m5 warnings\x1b[0m\x1b[33m in 1.66s\x1b[0m\x1b[33m =========================\x1b[0m\n'}
[15.257815] (stem_pkg) CommandEnded: {'returncode': 1}
[15.259616] (stem_pkg) TestFailure: {'identifier': 'stem_pkg'}
[15.259892] (stem_pkg) JobEnded: {'identifier': 'stem_pkg', 'rc': 0}
[15.262234] (test_pkg) CommandEnded: {'returncode': 0}
[15.264296] (test_pkg) JobEnded: {'identifier': 'test_pkg', 'rc': 0}
[15.266617] (tflite_pkg) StdoutLine: {'line': b'\x1b[1m============================= test session starts ==============================\x1b[0m\n'}
[15.267855] (tflite_pkg) StdoutLine: {'line': b'platform linux -- Python 3.8.10, pytest-7.1.2, pluggy-0.13.0\n'}
[15.268755] (tflite_pkg) StdoutLine: {'line': b'cachedir: /home/pi/sunflower/build/tflite_pkg/.pytest_cache\n'}
[15.269495] (tflite_pkg) StdoutLine: {'line': b'rootdir: /home/pi/sunflower/src/tflite_pkg\n'}
[15.270242] (tflite_pkg) StdoutLine: {'line': b'plugins: ament-flake8-0.9.6, ament-copyright-0.9.6, launch-testing-ros-0.11.6, ament-xmllint-0.9.6, ament-pep257-0.9.6, ament-lint-0.9.6, launch-testing-0.10.8, rerunfailures-10.2, repeat-0.9.1, colcon-core-0.8.3, cov-2.8.1\n'}
[15.270972] (tflite_pkg) StdoutLine: {'line': b'\x1b[1mcollecting ... \x1b[0m\x1b[1m\n'}
[15.271640] (tflite_pkg) StdoutLine: {'line': b'collected 3 items                                                              \x1b[0m\n'}
[15.272430] (tflite_pkg) StdoutLine: {'line': b'\n'}
[15.328908] (-) TimerEvent: {}
[15.373775] (tflite_pkg) StdoutLine: {'line': b'test/test_copyright.py \x1b[32m.\x1b[0m\x1b[33m                                                 [ 33%]\x1b[0m\n'}
[15.429089] (-) TimerEvent: {}
[15.529829] (-) TimerEvent: {}
[15.630666] (-) TimerEvent: {}
[15.731858] (-) TimerEvent: {}
[15.833194] (-) TimerEvent: {}
[15.935332] (-) TimerEvent: {}
[16.036308] (-) TimerEvent: {}
[16.120220] (tflite_pkg) StdoutLine: {'line': b'test/test_flake8.py \x1b[32m.\x1b[0m\x1b[33m                                                    [ 66%]\x1b[0m\n'}
[16.136454] (-) TimerEvent: {}
[16.196128] (tflite_pkg) StdoutLine: {'line': b'test/test_pep257.py \x1b[32m.\x1b[0m\x1b[33m                                                    [100%]\x1b[0m\n'}
[16.197187] (tflite_pkg) StderrLine: {'line': b'\n'}
[16.198026] (tflite_pkg) StderrLine: {'line': b'\x1b[33m=============================== warnings summary ===============================\x1b[0m\n'}
[16.199520] (tflite_pkg) StderrLine: {'line': b'../../../../../opt/ros/foxy/lib/python3.8/site-packages/launch_testing/pytest/hooks.py:179\n'}
[16.200378] (tflite_pkg) StderrLine: {'line': b'../../../../../opt/ros/foxy/lib/python3.8/site-packages/launch_testing/pytest/hooks.py:179\n'}
[16.201284] (tflite_pkg) StderrLine: {'line': b'../../../../../opt/ros/foxy/lib/python3.8/site-packages/launch_testing/pytest/hooks.py:179\n'}
[16.202419] (tflite_pkg) StderrLine: {'line': b'  Warning: The (fspath: py.path.local) argument to Module is deprecated. Please use the (path: pathlib.Path) argument instead.\n'}
[16.203347] (tflite_pkg) StderrLine: {'line': b'  See https://docs.pytest.org/en/latest/deprecations.html#fspath-argument-for-node-constructors-replaced-with-pathlib-path\n'}
[16.204260] (tflite_pkg) StderrLine: {'line': b'\n'}
[16.205995] (tflite_pkg) StderrLine: {'line': b'../../../../../usr/lib/python3/dist-packages/pydocstyle/config.py:6\n'}
[16.208495] (tflite_pkg) StderrLine: {'line': b"  Warning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n"}
[16.210987] (tflite_pkg) StderrLine: {'line': b'\n'}
[16.213764] (tflite_pkg) StderrLine: {'line': b'../../../.local/lib/python3.8/site-packages/_pytest/nodes.py:633\n'}
[16.217994] (tflite_pkg) StderrLine: {'line': b'  Warning: The (fspath: py.path.local) argument to Package is deprecated. Please use the (path: pathlib.Path) argument instead.\n'}
[16.221687] (tflite_pkg) StderrLine: {'line': b'  See https://docs.pytest.org/en/latest/deprecations.html#fspath-argument-for-node-constructors-replaced-with-pathlib-path\n'}
[16.225336] (tflite_pkg) StderrLine: {'line': b'\n'}
[16.229223] (tflite_pkg) StderrLine: {'line': b'-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n'}
[16.232739] (tflite_pkg) StdoutLine: {'line': b'------ generated xml file: /home/pi/sunflower/build/tflite_pkg/pytest.xml ------\n'}
[16.236238] (tflite_pkg) StdoutLine: {'line': b'\x1b[33m======================== \x1b[32m3 passed\x1b[0m, \x1b[33m\x1b[1m5 warnings\x1b[0m\x1b[33m in 1.29s\x1b[0m\x1b[33m =========================\x1b[0m\n'}
[16.239388] (-) TimerEvent: {}
[16.340911] (-) TimerEvent: {}
[16.442174] (-) TimerEvent: {}
[16.526468] (tflite_pkg) CommandEnded: {'returncode': 0}
[16.528802] (tflite_pkg) JobEnded: {'identifier': 'tflite_pkg', 'rc': 0}
[16.532669] (-) EventReactorShutdown: {}
